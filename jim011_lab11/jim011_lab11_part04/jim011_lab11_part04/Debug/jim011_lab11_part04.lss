
jim011_lab11_part04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000049a  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800118  00800118  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f23  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073f  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000646  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005be  00000000  00000000  00002ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 33       	cpi	r26, 0x34	; 52
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	66 d1       	rcall	.+716    	; 0x390 <main>
  c4:	e8 c1       	rjmp	.+976    	; 0x496 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
        if(c==0){return b;}
        a = b;
		b = c;
    }
    return 0;
}
  c8:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_avr_timer_M>
  cc:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <_avr_timer_M+0x1>
  d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_M+0x2>
  d4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_M+0x3>
  d8:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <_avr_timer_cntcurr>
  dc:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <_avr_timer_cntcurr+0x1>
  e0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <_avr_timer_cntcurr+0x2>
  e4:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 10e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 112:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 116:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 11a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 11e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 122:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 126:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <_avr_timer_cntcurr>
 148:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x2>
 150:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 15e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 162:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 166:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <TimerFlag>
 178:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
 17c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
 180:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
 184:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
 188:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_avr_timer_cntcurr>
 18c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <_avr_timer_cntcurr+0x1>
 190:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_avr_timer_cntcurr+0x2>
 194:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <GetKeypadKey>:
 1aa:	8f ee       	ldi	r24, 0xEF	; 239
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	00 00       	nop
 1b0:	30 9b       	sbis	0x06, 0	; 6
 1b2:	29 c0       	rjmp	.+82     	; 0x206 <GetKeypadKey+0x5c>
 1b4:	31 9b       	sbis	0x06, 1	; 6
 1b6:	29 c0       	rjmp	.+82     	; 0x20a <GetKeypadKey+0x60>
 1b8:	32 9b       	sbis	0x06, 2	; 6
 1ba:	29 c0       	rjmp	.+82     	; 0x20e <GetKeypadKey+0x64>
 1bc:	33 9b       	sbis	0x06, 3	; 6
 1be:	29 c0       	rjmp	.+82     	; 0x212 <GetKeypadKey+0x68>
 1c0:	8f ed       	ldi	r24, 0xDF	; 223
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	00 00       	nop
 1c6:	30 9b       	sbis	0x06, 0	; 6
 1c8:	26 c0       	rjmp	.+76     	; 0x216 <GetKeypadKey+0x6c>
 1ca:	31 9b       	sbis	0x06, 1	; 6
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <GetKeypadKey+0x70>
 1ce:	32 9b       	sbis	0x06, 2	; 6
 1d0:	26 c0       	rjmp	.+76     	; 0x21e <GetKeypadKey+0x74>
 1d2:	33 9b       	sbis	0x06, 3	; 6
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <GetKeypadKey+0x78>
 1d6:	8f eb       	ldi	r24, 0xBF	; 191
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	00 00       	nop
 1dc:	30 9b       	sbis	0x06, 0	; 6
 1de:	23 c0       	rjmp	.+70     	; 0x226 <GetKeypadKey+0x7c>
 1e0:	31 9b       	sbis	0x06, 1	; 6
 1e2:	23 c0       	rjmp	.+70     	; 0x22a <GetKeypadKey+0x80>
 1e4:	32 9b       	sbis	0x06, 2	; 6
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <GetKeypadKey+0x84>
 1e8:	33 9b       	sbis	0x06, 3	; 6
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <GetKeypadKey+0x88>
 1ec:	8f e7       	ldi	r24, 0x7F	; 127
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	00 00       	nop
 1f2:	30 9b       	sbis	0x06, 0	; 6
 1f4:	20 c0       	rjmp	.+64     	; 0x236 <GetKeypadKey+0x8c>
 1f6:	31 9b       	sbis	0x06, 1	; 6
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <GetKeypadKey+0x90>
 1fa:	32 9b       	sbis	0x06, 2	; 6
 1fc:	20 c0       	rjmp	.+64     	; 0x23e <GetKeypadKey+0x94>
 1fe:	33 9b       	sbis	0x06, 3	; 6
 200:	20 c0       	rjmp	.+64     	; 0x242 <GetKeypadKey+0x98>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	08 95       	ret
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	08 95       	ret
 20e:	87 e3       	ldi	r24, 0x37	; 55
 210:	08 95       	ret
 212:	8a e2       	ldi	r24, 0x2A	; 42
 214:	08 95       	ret
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	08 95       	ret
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	08 95       	ret
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	08 95       	ret
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	08 95       	ret
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	08 95       	ret
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	08 95       	ret
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	08 95       	ret
 232:	83 e2       	ldi	r24, 0x23	; 35
 234:	08 95       	ret
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	08 95       	ret
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	08 95       	ret
 23e:	83 e4       	ldi	r24, 0x43	; 67
 240:	08 95       	ret
 242:	84 e4       	ldi	r24, 0x44	; 68
 244:	08 95       	ret

00000246 <TickKeypad>:
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	af df       	rcall	.-162    	; 0x1aa <GetKeypadKey>
 24c:	c2 30       	cpi	r28, 0x02	; 2
 24e:	61 f0       	breq	.+24     	; 0x268 <TickKeypad+0x22>
 250:	28 f4       	brcc	.+10     	; 0x25c <TickKeypad+0x16>
 252:	cc 23       	and	r28, r28
 254:	79 f0       	breq	.+30     	; 0x274 <TickKeypad+0x2e>
 256:	c1 30       	cpi	r28, 0x01	; 1
 258:	51 f1       	breq	.+84     	; 0x2ae <TickKeypad+0x68>
 25a:	04 c0       	rjmp	.+8      	; 0x264 <TickKeypad+0x1e>
 25c:	c3 30       	cpi	r28, 0x03	; 3
 25e:	39 f0       	breq	.+14     	; 0x26e <TickKeypad+0x28>
 260:	c4 30       	cpi	r28, 0x04	; 4
 262:	29 f1       	breq	.+74     	; 0x2ae <TickKeypad+0x68>
 264:	c0 e0       	ldi	r28, 0x00	; 0
 266:	24 c0       	rjmp	.+72     	; 0x2b0 <TickKeypad+0x6a>
 268:	81 11       	cpse	r24, r1
 26a:	0c c0       	rjmp	.+24     	; 0x284 <TickKeypad+0x3e>
 26c:	21 c0       	rjmp	.+66     	; 0x2b0 <TickKeypad+0x6a>
 26e:	88 23       	and	r24, r24
 270:	69 f0       	breq	.+26     	; 0x28c <TickKeypad+0x46>
 272:	08 c0       	rjmp	.+16     	; 0x284 <TickKeypad+0x3e>
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <tempKP.1904>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 280:	c1 e0       	ldi	r28, 0x01	; 1
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <TickKeypad+0x6a>
 284:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <tempKP.1904>
 288:	c3 e0       	ldi	r28, 0x03	; 3
 28a:	12 c0       	rjmp	.+36     	; 0x2b0 <TickKeypad+0x6a>
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 290:	80 31       	cpi	r24, 0x10	; 16
 292:	20 f0       	brcs	.+8      	; 0x29c <TickKeypad+0x56>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <TickKeypad+0x5c>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <tempKP.1904>
 2a6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <outputKeypad>
 2aa:	c4 e0       	ldi	r28, 0x04	; 4
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <TickKeypad+0x6a>
 2ae:	c2 e0       	ldi	r28, 0x02	; 2
 2b0:	8c 2f       	mov	r24, r28
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <delay_ms>:
 2b6:	18 16       	cp	r1, r24
 2b8:	19 06       	cpc	r1, r25
 2ba:	5c f0       	brlt	.+22     	; 0x2d2 <delay_ms+0x1c>
 2bc:	08 95       	ret
 2be:	00 00       	nop
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	31 09       	sbc	r19, r1
 2c4:	e1 f7       	brne	.-8      	; 0x2be <delay_ms+0x8>
 2c6:	4f 5f       	subi	r20, 0xFF	; 255
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	84 17       	cp	r24, r20
 2cc:	95 07       	cpc	r25, r21
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <delay_ms+0x20>
 2d0:	08 95       	ret
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	27 e0       	ldi	r18, 0x07	; 7
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	f1 cf       	rjmp	.-30     	; 0x2be <delay_ms+0x8>

000002dc <LCD_WriteCommand>:
 2dc:	10 98       	cbi	0x02, 0	; 2
 2de:	8b b9       	out	0x0b, r24	; 11
 2e0:	11 9a       	sbi	0x02, 1	; 2
 2e2:	00 00       	nop
 2e4:	11 98       	cbi	0x02, 1	; 2
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	e5 cf       	rjmp	.-54     	; 0x2b6 <delay_ms>
 2ec:	08 95       	ret

000002ee <LCD_ClearScreen>:
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	f5 cf       	rjmp	.-22     	; 0x2dc <LCD_WriteCommand>
 2f2:	08 95       	ret

000002f4 <LCD_Cursor>:
 2f4:	81 31       	cpi	r24, 0x11	; 17
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <LCD_Cursor+0xa>
 2f8:	81 58       	subi	r24, 0x81	; 129
 2fa:	f0 cf       	rjmp	.-32     	; 0x2dc <LCD_WriteCommand>
 2fc:	08 95       	ret
 2fe:	81 55       	subi	r24, 0x51	; 81
 300:	ed cf       	rjmp	.-38     	; 0x2dc <LCD_WriteCommand>
 302:	08 95       	ret

00000304 <LCD_init>:
 304:	84 e6       	ldi	r24, 0x64	; 100
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	d6 df       	rcall	.-84     	; 0x2b6 <delay_ms>
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	e7 df       	rcall	.-50     	; 0x2dc <LCD_WriteCommand>
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	e5 df       	rcall	.-54     	; 0x2dc <LCD_WriteCommand>
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	e3 df       	rcall	.-58     	; 0x2dc <LCD_WriteCommand>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	e1 df       	rcall	.-62     	; 0x2dc <LCD_WriteCommand>
 31a:	8a e0       	ldi	r24, 0x0A	; 10
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	cb cf       	rjmp	.-106    	; 0x2b6 <delay_ms>
 320:	08 95       	ret

00000322 <LCD_WriteData>:
 322:	10 9a       	sbi	0x02, 0	; 2
 324:	8b b9       	out	0x0b, r24	; 11
 326:	11 9a       	sbi	0x02, 1	; 2
 328:	00 00       	nop
 32a:	11 98       	cbi	0x02, 1	; 2
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	c2 cf       	rjmp	.-124    	; 0x2b6 <delay_ms>
 332:	08 95       	ret

00000334 <LCD_DisplayString>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	18 2f       	mov	r17, r24
 33e:	eb 01       	movw	r28, r22
 340:	d6 df       	rcall	.-84     	; 0x2ee <LCD_ClearScreen>
 342:	88 81       	ld	r24, Y
 344:	88 23       	and	r24, r24
 346:	51 f0       	breq	.+20     	; 0x35c <LCD_DisplayString+0x28>
 348:	01 e0       	ldi	r16, 0x01	; 1
 34a:	01 0f       	add	r16, r17
 34c:	81 2f       	mov	r24, r17
 34e:	d2 df       	rcall	.-92     	; 0x2f4 <LCD_Cursor>
 350:	89 91       	ld	r24, Y+
 352:	e7 df       	rcall	.-50     	; 0x322 <LCD_WriteData>
 354:	10 2f       	mov	r17, r16
 356:	88 81       	ld	r24, Y
 358:	81 11       	cpse	r24, r1
 35a:	f6 cf       	rjmp	.-20     	; 0x348 <LCD_DisplayString+0x14>
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <TickOutputLED>:
 366:	88 23       	and	r24, r24
 368:	19 f0       	breq	.+6      	; 0x370 <TickOutputLED+0xa>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	38 f0       	brcs	.+14     	; 0x37c <TickOutputLED+0x16>
 36e:	0e c0       	rjmp	.+28     	; 0x38c <TickOutputLED+0x26>
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	71 e0       	ldi	r23, 0x01	; 1
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	de df       	rcall	.-68     	; 0x334 <LCD_DisplayString>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	08 95       	ret
 37c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <outputKeypad>
 380:	d0 df       	rcall	.-96     	; 0x322 <LCD_WriteData>
 382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 386:	b6 df       	rcall	.-148    	; 0x2f4 <LCD_Cursor>
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	08 95       	ret
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret

00000390 <main>:
}
// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <main+0x6>
 396:	00 d0       	rcall	.+0      	; 0x398 <main+0x8>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRC = 0xF0; PORTC = 0x0F;
 39c:	80 ef       	ldi	r24, 0xF0	; 240
 39e:	87 b9       	out	0x07, r24	; 7
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	88 b9       	out	0x08, r24	; 8
	
	DDRA = 0xFF; PORTA = 0x00;
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	81 b9       	out	0x01, r24	; 1
 3a8:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
 3aa:	8a b9       	out	0x0a, r24	; 10
 3ac:	1b b8       	out	0x0b, r1	; 11
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
	unsigned long int SMTick2_period = SMTick2_calc/GCD;

	//Declare an array of tasks 
	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 3ae:	a3 e2       	ldi	r26, 0x23	; 35
 3b0:	b1 e0       	ldi	r27, 0x01	; 1
 3b2:	ba 83       	std	Y+2, r27	; 0x02
 3b4:	a9 83       	std	Y+1, r26	; 0x01
 3b6:	e8 e1       	ldi	r30, 0x18	; 24
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	fc 83       	std	Y+4, r31	; 0x04
 3bc:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 3be:	8c 93       	st	X, r24
	task1.period = SMTick1_period;//Task Period.
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	11 96       	adiw	r26, 0x01	; 1
 3ca:	4d 93       	st	X+, r20
 3cc:	5d 93       	st	X+, r21
 3ce:	6d 93       	st	X+, r22
 3d0:	7c 93       	st	X, r23
 3d2:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3d4:	15 96       	adiw	r26, 0x05	; 5
 3d6:	4d 93       	st	X+, r20
 3d8:	5d 93       	st	X+, r21
 3da:	6d 93       	st	X+, r22
 3dc:	7c 93       	st	X, r23
 3de:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &TickKeypad;//Function pointer for the tick.
 3e0:	23 e2       	ldi	r18, 0x23	; 35
 3e2:	31 e0       	ldi	r19, 0x01	; 1
 3e4:	1a 96       	adiw	r26, 0x0a	; 10
 3e6:	3c 93       	st	X, r19
 3e8:	2e 93       	st	-X, r18
 3ea:	19 97       	sbiw	r26, 0x09	; 9

	// Task 2
	task2.state = -1;//Task initial state.
 3ec:	80 83       	st	Z, r24
	task2.period = SMTick2_period;//Task Period.
 3ee:	41 83       	std	Z+1, r20	; 0x01
 3f0:	52 83       	std	Z+2, r21	; 0x02
 3f2:	63 83       	std	Z+3, r22	; 0x03
 3f4:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 3f6:	45 83       	std	Z+5, r20	; 0x05
 3f8:	56 83       	std	Z+6, r21	; 0x06
 3fa:	67 83       	std	Z+7, r22	; 0x07
 3fc:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &TickOutputLED;//Function pointer for the tick.
 3fe:	83 eb       	ldi	r24, 0xB3	; 179
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	92 87       	std	Z+10, r25	; 0x0a
 404:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 406:	62 e3       	ldi	r22, 0x32	; 50
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	5c de       	rcall	.-840    	; 0xc8 <TimerSet>
	TimerOn();
 410:	6c de       	rcall	.-808    	; 0xea <TimerOn>
	LCD_init();
 412:	78 df       	rcall	.-272    	; 0x304 <LCD_init>
 414:	7e 01       	movw	r14, r28
 416:	85 e0       	ldi	r24, 0x05	; 5
 418:	e8 0e       	add	r14, r24
 41a:	f1 1c       	adc	r15, r1
 41c:	de 01       	movw	r26, r28
 41e:	11 96       	adiw	r26, 0x01	; 1
 420:	6d 01       	movw	r12, r26
 422:	f6 01       	movw	r30, r12
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 424:	01 91       	ld	r16, Z+
 426:	11 91       	ld	r17, Z+
 428:	6f 01       	movw	r12, r30
 42a:	d8 01       	movw	r26, r16
 42c:	15 96       	adiw	r26, 0x05	; 5
 42e:	4d 91       	ld	r20, X+
 430:	5d 91       	ld	r21, X+
 432:	6d 91       	ld	r22, X+
 434:	7c 91       	ld	r23, X
 436:	18 97       	sbiw	r26, 0x08	; 8
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	8d 91       	ld	r24, X+
 43c:	9d 91       	ld	r25, X+
 43e:	0d 90       	ld	r0, X+
 440:	bc 91       	ld	r27, X
 442:	a0 2d       	mov	r26, r0
 444:	48 17       	cp	r20, r24
 446:	59 07       	cpc	r21, r25
 448:	6a 07       	cpc	r22, r26
 44a:	7b 07       	cpc	r23, r27
 44c:	71 f4       	brne	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44e:	f8 01       	movw	r30, r16
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 450:	80 81       	ld	r24, Z
 452:	01 84       	ldd	r0, Z+9	; 0x09
 454:	f2 85       	ldd	r31, Z+10	; 0x0a
 456:	e0 2d       	mov	r30, r0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	09 95       	icall
 45c:	d8 01       	movw	r26, r16
 45e:	8c 93       	st	X, r24
 460:	f8 01       	movw	r30, r16
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 462:	15 82       	std	Z+5, r1	; 0x05
 464:	16 82       	std	Z+6, r1	; 0x06
 466:	17 82       	std	Z+7, r1	; 0x07
 468:	10 86       	std	Z+8, r1	; 0x08
 46a:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 46c:	85 81       	ldd	r24, Z+5	; 0x05
 46e:	96 81       	ldd	r25, Z+6	; 0x06
 470:	a7 81       	ldd	r26, Z+7	; 0x07
 472:	b0 85       	ldd	r27, Z+8	; 0x08
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	a1 1d       	adc	r26, r1
 478:	b1 1d       	adc	r27, r1
 47a:	85 83       	std	Z+5, r24	; 0x05
 47c:	96 83       	std	Z+6, r25	; 0x06
 47e:	a7 83       	std	Z+7, r26	; 0x07
 480:	b0 87       	std	Z+8, r27	; 0x08
 482:	ce 14       	cp	r12, r14
	LCD_init();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 484:	df 04       	cpc	r13, r15
 486:	69 f6       	brne	.-102    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 488:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <TimerFlag>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 48c:	88 23       	and	r24, r24
 48e:	e1 f3       	breq	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <TimerFlag>
		TimerFlag = 0;
 494:	c3 cf       	rjmp	.-122    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

00000496 <_exit>:
	}
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
