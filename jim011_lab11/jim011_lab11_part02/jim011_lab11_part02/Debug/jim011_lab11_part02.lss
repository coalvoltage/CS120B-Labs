
jim011_lab11_part02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080013c  0080013c  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd0  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074d  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000651  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fe  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000036df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e3       	ldi	r26, 0x3C	; 60
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 34       	cpi	r26, 0x4D	; 77
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3c d1       	rcall	.+632    	; 0x33c <main>
  c4:	85 c1       	rjmp	.+778    	; 0x3d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
        if(c==0){return b;}
        a = b;
		b = c;
    }
    return 0;
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	10 9a       	sbi	0x02, 0	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	11 9a       	sbi	0x02, 1	; 2
 13a:	00 00       	nop
 13c:	11 98       	cbi	0x02, 1	; 2
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <TimerSet>:
 146:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <_avr_timer_M>
 14a:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <_avr_timer_M+0x1>
 14e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <_avr_timer_M+0x2>
 152:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <_avr_timer_M+0x3>
 156:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <_avr_timer_cntcurr>
 15a:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <_avr_timer_cntcurr+0x1>
 15e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_avr_timer_cntcurr+0x2>
 162:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_avr_timer_cntcurr+0x3>
 166:	08 95       	ret

00000168 <TimerOn>:
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16e:	8d e7       	ldi	r24, 0x7D	; 125
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 188:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_avr_timer_M>
 18c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <_avr_timer_M+0x1>
 190:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <_avr_timer_M+0x2>
 194:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <_avr_timer_M+0x3>
 198:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 19c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 1a8:	8f b7       	in	r24, 0x3f	; 63
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	8f bf       	out	0x3f, r24	; 63
 1ae:	08 95       	ret

000001b0 <__vector_13>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_avr_timer_cntcurr>
 1c6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_avr_timer_cntcurr+0x1>
 1ca:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <_avr_timer_cntcurr+0x2>
 1ce:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <_avr_timer_cntcurr+0x3>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	a1 09       	sbc	r26, r1
 1d6:	b1 09       	sbc	r27, r1
 1d8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 1dc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 1e0:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 1e4:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 1e8:	89 2b       	or	r24, r25
 1ea:	8a 2b       	or	r24, r26
 1ec:	8b 2b       	or	r24, r27
 1ee:	99 f4       	brne	.+38     	; 0x216 <__vector_13+0x66>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <TimerFlag>
 1f6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_avr_timer_M>
 1fa:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <_avr_timer_M+0x1>
 1fe:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <_avr_timer_M+0x2>
 202:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <_avr_timer_M+0x3>
 206:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 20a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 20e:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 212:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <LCD_CustomStringPrint>:

void LCD_CustomStringPrint(unsigned char stringSize, const char stringData[]) {
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	08 2f       	mov	r16, r24
 234:	f6 2e       	mov	r15, r22
 236:	17 2f       	mov	r17, r23
	LCD_ClearScreen();
 238:	63 df       	rcall	.-314    	; 0x100 <LCD_ClearScreen>
	unsigned char c = 1;
	unsigned char d = 0;
	while(c < stringSize) {
 23a:	02 30       	cpi	r16, 0x02	; 2
 23c:	58 f0       	brcs	.+22     	; 0x254 <LCD_CustomStringPrint+0x2c>
 23e:	cf 2d       	mov	r28, r15
 240:	d1 2f       	mov	r29, r17
 242:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Cursor(c++);
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	18 0f       	add	r17, r24
 248:	5e df       	rcall	.-324    	; 0x106 <LCD_Cursor>
		LCD_WriteData(stringData[d]);
 24a:	89 91       	ld	r24, Y+
 24c:	73 df       	rcall	.-282    	; 0x134 <LCD_WriteData>
 24e:	81 2f       	mov	r24, r17
void LCD_CustomStringPrint(unsigned char stringSize, const char stringData[]) {
	LCD_ClearScreen();
	unsigned char c = 1;
	unsigned char d = 0;
	while(c < stringSize) {
		LCD_Cursor(c++);
 250:	01 13       	cpse	r16, r17

void LCD_CustomStringPrint(unsigned char stringSize, const char stringData[]) {
	LCD_ClearScreen();
	unsigned char c = 1;
	unsigned char d = 0;
	while(c < stringSize) {
 252:	f8 cf       	rjmp	.-16     	; 0x244 <LCD_CustomStringPrint+0x1c>
 254:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(stringData[d]);
		d++;
	}
};
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	08 95       	ret

00000260 <moveArray>:
 260:	cf 93       	push	r28

char tempArray[16] = " ";
void moveArray(char arrayMessage[], unsigned char index, unsigned char outputSize, unsigned char maxSizeMessage) {
 262:	df 93       	push	r29
	
	for(unsigned char i = 0; i < outputSize; i++) {
 264:	44 23       	and	r20, r20
 266:	09 f4       	brne	.+2      	; 0x26a <moveArray+0xa>
 268:	40 c0       	rjmp	.+128    	; 0x2ea <moveArray+0x8a>
 26a:	e7 e2       	ldi	r30, 0x27	; 39
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	24 0f       	add	r18, r20
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	d9 01       	movw	r26, r18
 276:	a8 5d       	subi	r26, 0xD8	; 216
 278:	be 4f       	sbci	r27, 0xFE	; 254
        tempArray[i] = ' ';
 27a:	50 e2       	ldi	r21, 0x20	; 32
 27c:	51 93       	st	Z+, r21
};

char tempArray[16] = " ";
void moveArray(char arrayMessage[], unsigned char index, unsigned char outputSize, unsigned char maxSizeMessage) {
	
	for(unsigned char i = 0; i < outputSize; i++) {
 27e:	ea 17       	cp	r30, r26
 280:	fb 07       	cpc	r31, r27
 282:	e1 f7       	brne	.-8      	; 0x27c <moveArray+0x1c>
        tempArray[i] = ' ';
	}
	unsigned char tempPosition = outputSize - 1;
	if(index < outputSize){
 284:	64 17       	cp	r22, r20
 286:	f0 f4       	brcc	.+60     	; 0x2c4 <moveArray+0x64>
		for(unsigned char i = 0; i < index; i++) {
 288:	66 23       	and	r22, r22
 28a:	79 f1       	breq	.+94     	; 0x2ea <moveArray+0x8a>
 28c:	dc 01       	movw	r26, r24
 28e:	c1 e0       	ldi	r28, 0x01	; 1
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	c6 1b       	sub	r28, r22
 294:	d1 09       	sbc	r29, r1
 296:	c2 0f       	add	r28, r18
 298:	d3 1f       	adc	r29, r19
 29a:	c9 5d       	subi	r28, 0xD9	; 217
 29c:	de 4f       	sbci	r29, 0xFE	; 254
 29e:	61 50       	subi	r22, 0x01	; 1
 2a0:	26 2f       	mov	r18, r22
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
			tempArray[tempPosition - (index - 1 - i)] = arrayMessage[i];
 2ac:	2d 91       	ld	r18, X+
 2ae:	29 93       	st	Y+, r18
	for(unsigned char i = 0; i < outputSize; i++) {
        tempArray[i] = ' ';
	}
	unsigned char tempPosition = outputSize - 1;
	if(index < outputSize){
		for(unsigned char i = 0; i < index; i++) {
 2b0:	a8 17       	cp	r26, r24
 2b2:	b9 07       	cpc	r27, r25
 2b4:	d9 f7       	brne	.-10     	; 0x2ac <moveArray+0x4c>
 2b6:	19 c0       	rjmp	.+50     	; 0x2ea <moveArray+0x8a>
		}
	}*/
	else {

		for(unsigned char i = 0; i < outputSize; i++) {
			tempArray[outputSize - i - 1] = arrayMessage[index - i];
 2b8:	82 91       	ld	r24, -Z
 2ba:	8e 93       	st	-X, r24
            tempArray[outputSize - i - 1] = arrayMessage[maxSizeMessage -1 -i];
		}
	}*/
	else {

		for(unsigned char i = 0; i < outputSize; i++) {
 2bc:	a2 17       	cp	r26, r18
 2be:	b3 07       	cpc	r27, r19
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <moveArray+0x58>
 2c2:	13 c0       	rjmp	.+38     	; 0x2ea <moveArray+0x8a>
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	fc 01       	movw	r30, r24
 2cc:	e6 0f       	add	r30, r22
 2ce:	f7 1f       	adc	r31, r23
 2d0:	a4 2f       	mov	r26, r20
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	9d 01       	movw	r18, r26
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	31 09       	sbc	r19, r1
 2da:	a9 5d       	subi	r26, 0xD9	; 217
 2dc:	be 4f       	sbci	r27, 0xFE	; 254
 2de:	41 50       	subi	r20, 0x01	; 1
 2e0:	24 1b       	sub	r18, r20
 2e2:	31 09       	sbc	r19, r1
 2e4:	29 5d       	subi	r18, 0xD9	; 217
 2e6:	3e 4f       	sbci	r19, 0xFE	; 254
 2e8:	e7 cf       	rjmp	.-50     	; 0x2b8 <moveArray+0x58>
			tempArray[outputSize - i - 1] = arrayMessage[index - i];
		}
	}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <DISTick>:
} task;

// --------END User defined FSMs-----------------------------------------------
enum DISStates {DISStart, DISReset, DISDisplay};
	
unsigned char DISTick(unsigned char state) {
 2f0:	cf 93       	push	r28
 2f2:	c8 2f       	mov	r28, r24
	switch(state) {
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	59 f0       	breq	.+22     	; 0x30e <DISTick+0x1e>
 2f8:	30 f0       	brcs	.+12     	; 0x306 <DISTick+0x16>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	d9 f4       	brne	.+54     	; 0x334 <DISTick+0x44>
			break;
		case DISReset:
			state = DISDisplay;
			break;
		case DISDisplay:
			if(count >= countMAX){
 2fe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <count>
 302:	85 33       	cpi	r24, 0x35	; 53
 304:	28 f0       	brcs	.+10     	; 0x310 <DISTick+0x20>
			state = DISStart;
			break;
	}
	switch(state) {
		case DISReset:
		count = 0;
 306:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <count>
 30a:	c1 e0       	ldi	r28, 0x01	; 1
 30c:	01 c0       	rjmp	.+2      	; 0x310 <DISTick+0x20>

// --------END User defined FSMs-----------------------------------------------
enum DISStates {DISStart, DISReset, DISDisplay};
	
unsigned char DISTick(unsigned char state) {
	switch(state) {
 30e:	c2 e0       	ldi	r28, 0x02	; 2
	}
	switch(state) {
		case DISReset:
		count = 0;
		case DISDisplay:
		moveArray(message,count,MAX_LCD_SIZE,messageSize);
 310:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 314:	40 e1       	ldi	r20, 0x10	; 16
 316:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <count>
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	a0 df       	rcall	.-192    	; 0x260 <moveArray>
		LCD_CustomStringPrint(MAX_LCD_SIZE,tempArray);
 320:	67 e2       	ldi	r22, 0x27	; 39
 322:	71 e0       	ldi	r23, 0x01	; 1
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	80 df       	rcall	.-256    	; 0x228 <LCD_CustomStringPrint>
		count++;
 328:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <count>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <count>
		break;
 332:	01 c0       	rjmp	.+2      	; 0x336 <DISTick+0x46>
			if(count >= countMAX){
				state = DISReset;
			}
			break;
		default:
			state = DISStart;
 334:	c0 e0       	ldi	r28, 0x00	; 0
		
		default:
		break;
	}
	return state;
}
 336:	8c 2f       	mov	r24, r28
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <main>:

// Implement scheduler code from PES.
int main(){
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	81 b9       	out	0x01, r24	; 1
 340:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00;
 342:	8a b9       	out	0x0a, r24	; 10
 344:	1b b8       	out	0x0b, r1	; 11
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 346:	ec e3       	ldi	r30, 0x3C	; 60
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	80 83       	st	Z, r24
	task1.period = SMTick1_period;//Task Period.
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	a0 e0       	ldi	r26, 0x00	; 0
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	81 83       	std	Z+1, r24	; 0x01
 356:	92 83       	std	Z+2, r25	; 0x02
 358:	a3 83       	std	Z+3, r26	; 0x03
 35a:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 35c:	85 83       	std	Z+5, r24	; 0x05
 35e:	96 83       	std	Z+6, r25	; 0x06
 360:	a7 83       	std	Z+7, r26	; 0x07
 362:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &DISTick;//Function pointer for the tick.
 364:	88 e7       	ldi	r24, 0x78	; 120
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	92 87       	std	Z+10, r25	; 0x0a
 36a:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(GCD);
 36c:	68 ec       	ldi	r22, 0xC8	; 200
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	e8 de       	rcall	.-560    	; 0x146 <TimerSet>
	TimerOn();
 376:	f8 de       	rcall	.-528    	; 0x168 <TimerOn>
	LCD_init();
 378:	ce de       	rcall	.-612    	; 0x116 <LCD_init>
 37a:	cc e3       	ldi	r28, 0x3C	; 60
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 37c:	d1 e0       	ldi	r29, 0x01	; 1
 37e:	4d 81       	ldd	r20, Y+5	; 0x05
 380:	5e 81       	ldd	r21, Y+6	; 0x06
 382:	6f 81       	ldd	r22, Y+7	; 0x07
 384:	78 85       	ldd	r23, Y+8	; 0x08
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	ab 81       	ldd	r26, Y+3	; 0x03
 38c:	bc 81       	ldd	r27, Y+4	; 0x04
 38e:	48 17       	cp	r20, r24
 390:	59 07       	cpc	r21, r25
 392:	6a 07       	cpc	r22, r26
 394:	7b 07       	cpc	r23, r27
 396:	51 f4       	brne	.+20     	; 0x3ac <main+0x70>
 398:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 39a:	e9 85       	ldd	r30, Y+9	; 0x09
 39c:	fa 85       	ldd	r31, Y+10	; 0x0a
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	09 95       	icall
 3a2:	88 83       	st	Y, r24
 3a4:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 3a6:	1e 82       	std	Y+6, r1	; 0x06
 3a8:	1f 82       	std	Y+7, r1	; 0x07
 3aa:	18 86       	std	Y+8, r1	; 0x08
 3ac:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 3ae:	9e 81       	ldd	r25, Y+6	; 0x06
 3b0:	af 81       	ldd	r26, Y+7	; 0x07
 3b2:	b8 85       	ldd	r27, Y+8	; 0x08
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	8d 83       	std	Y+5, r24	; 0x05
 3bc:	9e 83       	std	Y+6, r25	; 0x06
 3be:	af 83       	std	Y+7, r26	; 0x07
 3c0:	b8 87       	std	Y+8, r27	; 0x08
 3c2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TimerFlag>
		}
		while(!TimerFlag);
 3c6:	88 23       	and	r24, r24
 3c8:	e1 f3       	breq	.-8      	; 0x3c2 <main+0x86>
 3ca:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <TimerFlag>
		TimerFlag = 0;
 3ce:	d7 cf       	rjmp	.-82     	; 0x37e <main+0x42>

000003d0 <_exit>:
	}
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
