
jim011_lab05_part03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e1  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  000012c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013b  00000000  00000000  00001a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4f c0       	rjmp	.+158    	; 0x13a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
  ac:	11 b8       	out	0x01, r1	; 1
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	15 b8       	out	0x05, r1	; 5
	unsigned char sequence[5];
	sequence[0] = 0x2A;
  b6:	8a e2       	ldi	r24, 0x2A	; 42
  b8:	89 83       	std	Y+1, r24	; 0x01
	sequence[1] = 0x15;
  ba:	85 e1       	ldi	r24, 0x15	; 21
  bc:	8a 83       	std	Y+2, r24	; 0x02
	sequence[2] = 0x3F;
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	8b 83       	std	Y+3, r24	; 0x03
	sequence[3] = 0x0C;
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	8c 83       	std	Y+4, r24	; 0x04
	sequence[4] = 0x33;
  c6:	83 e3       	ldi	r24, 0x33	; 51
  c8:	8d 83       	std	Y+5, r24	; 0x05
    enum state {start, init, loop, buttonPres, buttonRel} state;
	state = start;
	
	unsigned char inputA = 0;
	unsigned char outputB = 0;
	unsigned char index = 0;
  ca:	50 e0       	ldi	r21, 0x00	; 0
	
    enum state {start, init, loop, buttonPres, buttonRel} state;
	state = start;
	
	unsigned char inputA = 0;
	unsigned char outputB = 0;
  cc:	40 e0       	ldi	r20, 0x00	; 0
	sequence[2] = 0x3F;
	sequence[3] = 0x0C;
	sequence[4] = 0x33;
	
    enum state {start, init, loop, buttonPres, buttonRel} state;
	state = start;
  ce:	80 e0       	ldi	r24, 0x00	; 0
			outputB = 0x00;
			break;
			
			case loop:
			outputB = sequence[index];
			break;
  d0:	a2 e0       	ldi	r26, 0x02	; 2
				index = 0;
			}
			break;
			
			default:
			state = start;
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	74 e0       	ldi	r23, 0x04	; 4
    while (1) 
    {
		//read input
		inputA = ~PINA & 0x01;
		//transition
		switch(state) {
  d6:	b1 e0       	ldi	r27, 0x01	; 1
	const unsigned char ARRAY_LIMIT = 4;
	
    while (1) 
    {
		//read input
		inputA = ~PINA & 0x01;
  d8:	90 b1       	in	r25, 0x00	; 0
  da:	29 2f       	mov	r18, r25
  dc:	21 70       	andi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
		//transition
		switch(state) {
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	61 f0       	breq	.+24     	; 0xfc <main+0x5e>
  e4:	28 f4       	brcc	.+10     	; 0xf0 <main+0x52>
  e6:	88 23       	and	r24, r24
  e8:	f1 f0       	breq	.+60     	; 0x126 <main+0x88>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	71 f0       	breq	.+28     	; 0x10a <main+0x6c>
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <main+0x5a>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	39 f0       	breq	.+14     	; 0x102 <main+0x64>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	49 f0       	breq	.+18     	; 0x10a <main+0x6c>
  f8:	86 2f       	mov	r24, r22
  fa:	1d c0       	rjmp	.+58     	; 0x136 <main+0x98>
			case init:
			state = loop;
			break;
			
			case loop:
			if(inputA) {
  fc:	23 2b       	or	r18, r19
  fe:	b9 f0       	breq	.+46     	; 0x12e <main+0x90>
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x6c>
				state = buttonPres;
			}
			break;
			
			case buttonPres:
			if(!inputA) {
 102:	23 2b       	or	r18, r19
 104:	59 f4       	brne	.+22     	; 0x11c <main+0x7e>
				index = 0;
			}
			break;
			
			default:
			state = start;
 106:	86 2f       	mov	r24, r22
 108:	16 c0       	rjmp	.+44     	; 0x136 <main+0x98>
			index = 0;
			outputB = 0x00;
			break;
			
			case loop:
			outputB = sequence[index];
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	e5 0f       	add	r30, r21
 114:	f1 1d       	adc	r31, r1
 116:	40 81       	ld	r20, Z
			break;
 118:	8a 2f       	mov	r24, r26
 11a:	0d c0       	rjmp	.+26     	; 0x136 <main+0x98>
			
			case buttonRel:
			if(index < ARRAY_LIMIT) {
 11c:	54 30       	cpi	r21, 0x04	; 4
 11e:	48 f4       	brcc	.+18     	; 0x132 <main+0x94>
				index++;
 120:	5f 5f       	subi	r21, 0xFF	; 255
 122:	87 2f       	mov	r24, r23
 124:	08 c0       	rjmp	.+16     	; 0x136 <main+0x98>
		switch(state) {
			case start:
			break;
			
			case init:
			index = 0;
 126:	50 e0       	ldi	r21, 0x00	; 0
			outputB = 0x00;
 128:	46 2f       	mov	r20, r22
    while (1) 
    {
		//read input
		inputA = ~PINA & 0x01;
		//transition
		switch(state) {
 12a:	8b 2f       	mov	r24, r27
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x98>
				index = 0;
			}
			break;
			
			default:
			state = start;
 12e:	86 2f       	mov	r24, r22
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x98>
			case buttonRel:
			if(index < ARRAY_LIMIT) {
				index++;
			}
			else {
				index = 0;
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	87 2f       	mov	r24, r23
			
			default:
			state = start;
			break;
		};
		PORTB = outputB;
 136:	45 b9       	out	0x05, r20	; 5
    }
 138:	cf cf       	rjmp	.-98     	; 0xd8 <main+0x3a>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
