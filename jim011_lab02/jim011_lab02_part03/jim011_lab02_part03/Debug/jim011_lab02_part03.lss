
jim011_lab02_part03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000857  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4a c0       	rjmp	.+148    	; 0x130 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 */
#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
  b2:	82 e2       	ldi	r24, 0x22	; 34
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
  bc:	87 e2       	ldi	r24, 0x27	; 39
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
	unsigned char cntavail = 0x00;
  ce:	19 82       	std	Y+1, r1	; 0x01
	unsigned char tempA = 0x00;
  d0:	1a 82       	std	Y+2, r1	; 0x02
	while (1)
	{
		tempA = PINA & 0x0F;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	8a 83       	std	Y+2, r24	; 0x02
		cntavail = 0;
  de:	19 82       	std	Y+1, r1	; 0x01
		for(char i = 0; i < 4;i++) {
  e0:	1b 82       	std	Y+3, r1	; 0x03
  e2:	10 c0       	rjmp	.+32     	; 0x104 <main+0x66>
			if((tempA & 0x01) == 0x01) {
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	99 27       	eor	r25, r25
  ee:	89 2b       	or	r24, r25
  f0:	19 f0       	breq	.+6      	; 0xf8 <main+0x5a>
				cntavail++;
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	89 83       	std	Y+1, r24	; 0x01
			}
			tempA = tempA >> 0x01;
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	86 95       	lsr	r24
  fc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char tempA = 0x00;
	while (1)
	{
		tempA = PINA & 0x0F;
		cntavail = 0;
		for(char i = 0; i < 4;i++) {
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8b 83       	std	Y+3, r24	; 0x03
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	68 f3       	brcs	.-38     	; 0xe4 <main+0x46>
				cntavail++;
			}
			tempA = tempA >> 0x01;
		}
		
		if(cntavail == 4) {
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	84 30       	cpi	r24, 0x04	; 4
 10e:	31 f4       	brne	.+12     	; 0x11c <main+0x7e>
			PORTC = 0x40;
 110:	88 e2       	ldi	r24, 0x28	; 40
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	20 e4       	ldi	r18, 0x40	; 64
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	db cf       	rjmp	.-74     	; 0xd2 <main+0x34>
		}
		else {
			PORTC = 4 - cntavail;
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	34 e0       	ldi	r19, 0x04	; 4
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	f3 2f       	mov	r31, r19
 126:	f2 1b       	sub	r31, r18
 128:	2f 2f       	mov	r18, r31
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
		}
	}
 12e:	d1 cf       	rjmp	.-94     	; 0xd2 <main+0x34>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
