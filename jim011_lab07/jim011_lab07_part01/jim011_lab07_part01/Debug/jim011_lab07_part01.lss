
jim011_lab07_part01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7b  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d8  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c4  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052c  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a 01       	movw	r4, r20
  8e:	2e 01       	movw	r4, r28
  90:	32 01       	movw	r6, r4
  92:	44 01       	movw	r8, r8
  94:	4a 01       	movw	r8, r20
  96:	77 01       	movw	r14, r14
  98:	61 01       	movw	r12, r2
  9a:	7b 01       	movw	r14, r22

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e8 eb       	ldi	r30, 0xB8	; 184
  b0:	f3 e0       	ldi	r31, 0x03	; 3
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a4 e0       	ldi	r26, 0x04	; 4
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ae 30       	cpi	r26, 0x0E	; 14
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	4d d1       	rcall	.+666    	; 0x36e <main>
  d4:	6f c1       	rjmp	.+734    	; 0x3b4 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <delay_ms>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	5c f0       	brlt	.+22     	; 0xf4 <delay_ms+0x1c>
  de:	08 95       	ret
  e0:	00 00       	nop
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	31 09       	sbc	r19, r1
  e6:	e1 f7       	brne	.-8      	; 0xe0 <delay_ms+0x8>
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	84 17       	cp	r24, r20
  ee:	95 07       	cpc	r25, r21
  f0:	19 f4       	brne	.+6      	; 0xf8 <delay_ms+0x20>
  f2:	08 95       	ret
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	33 e0       	ldi	r19, 0x03	; 3
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <delay_ms+0x8>

000000fe <LCD_WriteCommand>:
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	88 b9       	out	0x08, r24	; 8
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	00 00       	nop
 106:	5f 98       	cbi	0x0b, 7	; 11
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <delay_ms>
 10e:	08 95       	ret

00000110 <LCD_Cursor>:
 110:	81 31       	cpi	r24, 0x11	; 17
 112:	18 f4       	brcc	.+6      	; 0x11a <LCD_Cursor+0xa>
 114:	81 58       	subi	r24, 0x81	; 129
 116:	f3 cf       	rjmp	.-26     	; 0xfe <LCD_WriteCommand>
 118:	08 95       	ret
 11a:	81 55       	subi	r24, 0x51	; 81
 11c:	f0 cf       	rjmp	.-32     	; 0xfe <LCD_WriteCommand>
 11e:	08 95       	ret

00000120 <LCD_init>:
 120:	84 e6       	ldi	r24, 0x64	; 100
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	d9 df       	rcall	.-78     	; 0xd8 <delay_ms>
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	ea df       	rcall	.-44     	; 0xfe <LCD_WriteCommand>
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	e8 df       	rcall	.-48     	; 0xfe <LCD_WriteCommand>
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	e6 df       	rcall	.-52     	; 0xfe <LCD_WriteCommand>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	e4 df       	rcall	.-56     	; 0xfe <LCD_WriteCommand>
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ce cf       	rjmp	.-100    	; 0xd8 <delay_ms>
 13c:	08 95       	ret

0000013e <LCD_WriteData>:
 13e:	5e 9a       	sbi	0x0b, 6	; 11
 140:	88 b9       	out	0x08, r24	; 8
 142:	5f 9a       	sbi	0x0b, 7	; 11
 144:	00 00       	nop
 146:	5f 98       	cbi	0x0b, 7	; 11
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	c5 cf       	rjmp	.-118    	; 0xd8 <delay_ms>
 14e:	08 95       	ret

00000150 <TimerOn>:
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 156:	8d e7       	ldi	r24, 0x7D	; 125
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 168:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 16c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 178:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 17c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 184:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 188:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 18c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8f bf       	out	0x3f, r24	; 63
 196:	08 95       	ret

00000198 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 1aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 1ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 1b2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 1b6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	a1 09       	sbc	r26, r1
 1be:	b1 09       	sbc	r27, r1
 1c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 1c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 1c8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 1cc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1d0:	89 2b       	or	r24, r25
 1d2:	8a 2b       	or	r24, r26
 1d4:	8b 2b       	or	r24, r27
 1d6:	99 f4       	brne	.+38     	; 0x1fe <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 1f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 1f6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 1fa:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	}
}
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 210:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 214:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 21c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 220:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_avr_timer_cntcurr>
 224:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_avr_timer_cntcurr+0x1>
 228:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr+0x2>
 22c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x3>
 230:	08 95       	ret

00000232 <tick>:
		TimerFlag = 0;
	}
}

void tick() {
	a = PINA;
 232:	80 b1       	in	r24, 0x00	; 0
	a = (~a) & 0x03;
 234:	80 95       	com	r24
 236:	83 70       	andi	r24, 0x03	; 3
 238:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <a>
	//Transition?
	switch(state){
 23c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <state>
 240:	4e 2f       	mov	r20, r30
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	48 30       	cpi	r20, 0x08	; 8
 246:	51 05       	cpc	r21, r1
 248:	08 f0       	brcs	.+2      	; 0x24c <tick+0x1a>
 24a:	59 c0       	rjmp	.+178    	; 0x2fe <tick+0xcc>
 24c:	fa 01       	movw	r30, r20
 24e:	ea 5b       	subi	r30, 0xBA	; 186
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	a7 c0       	rjmp	.+334    	; 0x3a2 <__tablejump2__>
		case start:
			state = init;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			count = 0;
			break;
 25a:	6b c0       	rjmp	.+214    	; 0x332 <tick+0x100>
		
		case init:
			state = maintance;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			break;
 262:	60 c0       	rjmp	.+192    	; 0x324 <tick+0xf2>
		
		case maintance:
			if (a==1){
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	21 f4       	brne	.+8      	; 0x270 <tick+0x3e>
				state = add;
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 26e:	75 c0       	rjmp	.+234    	; 0x35a <tick+0x128>
			}
			else if (a==2){
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	21 f4       	brne	.+8      	; 0x27c <tick+0x4a>
				state = sub;
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 27a:	65 c0       	rjmp	.+202    	; 0x346 <tick+0x114>
			}
			else if (a==3){
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	09 f0       	breq	.+2      	; 0x282 <tick+0x50>
 280:	51 c0       	rjmp	.+162    	; 0x324 <tick+0xf2>
				state = reset;
 282:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 286:	5c c0       	rjmp	.+184    	; 0x340 <tick+0x10e>
			}
			break;
			
		case reset:
			if(a == 0) {
 288:	81 11       	cpse	r24, r1
 28a:	5a c0       	rjmp	.+180    	; 0x340 <tick+0x10e>
				state = maintance;
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 292:	48 c0       	rjmp	.+144    	; 0x324 <tick+0xf2>
			}
			break;
		case sub:
			if(a == 0 || count >= SEC1) {
 294:	88 23       	and	r24, r24
 296:	39 f0       	breq	.+14     	; 0x2a6 <tick+0x74>
 298:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 29c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 2a0:	2a 30       	cpi	r18, 0x0A	; 10
 2a2:	31 05       	cpc	r19, r1
 2a4:	40 f0       	brcs	.+16     	; 0x2b6 <tick+0x84>
				state = subRel;
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		case add:
		count++;
		break;
		
		case subRel:
		if(b > 0) {
 2ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <b>
 2b0:	81 11       	cpse	r24, r1
 2b2:	29 c0       	rjmp	.+82     	; 0x306 <tick+0xd4>
 2b4:	2b c0       	rjmp	.+86     	; 0x30c <tick+0xda>
			break;
		case sub:
			if(a == 0 || count >= SEC1) {
				state = subRel;
			}
			else if(a == 3) {
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	09 f0       	breq	.+2      	; 0x2bc <tick+0x8a>
 2ba:	45 c0       	rjmp	.+138    	; 0x346 <tick+0x114>
				state = reset;
 2bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 2c0:	3f c0       	rjmp	.+126    	; 0x340 <tick+0x10e>
			}
			break;
			
		case add:
			if(a == 0 || count >= SEC1) {
 2c2:	88 23       	and	r24, r24
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <tick+0xa2>
 2c6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 2ca:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 2ce:	2a 30       	cpi	r18, 0x0A	; 10
 2d0:	31 05       	cpc	r19, r1
 2d2:	40 f0       	brcs	.+16     	; 0x2e4 <tick+0xb2>
				state = addRel;
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
		}
		count = 0;
		break;
		
		case addRel:
		if(b < 9) {
 2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <b>
 2de:	89 30       	cpi	r24, 0x09	; 9
 2e0:	d0 f0       	brcs	.+52     	; 0x316 <tick+0xe4>
 2e2:	1c c0       	rjmp	.+56     	; 0x31c <tick+0xea>
			
		case add:
			if(a == 0 || count >= SEC1) {
				state = addRel;
			}
			else if(a == 3) {
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	c9 f5       	brne	.+114    	; 0x35a <tick+0x128>
				state = reset;
 2e8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 2ec:	29 c0       	rjmp	.+82     	; 0x340 <tick+0x10e>
			}
			break;
			
		case subRel:
			state = maintance;
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			break;
 2f4:	17 c0       	rjmp	.+46     	; 0x324 <tick+0xf2>
			
		case addRel:
			state = maintance;
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			break;
 2fc:	13 c0       	rjmp	.+38     	; 0x324 <tick+0xf2>
			
		default:
			state = init;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
			break;
 304:	16 c0       	rjmp	.+44     	; 0x332 <tick+0x100>
		count++;
		break;
		
		case subRel:
		if(b > 0) {
			b--;
 306:	81 50       	subi	r24, 0x01	; 1
 308:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b>
		}
		count = 0;
 30c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 310:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		break;
 314:	07 c0       	rjmp	.+14     	; 0x324 <tick+0xf2>
		
		case addRel:
		if(b < 9) {
			b++;
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b>
		}
		count = 0;
 31c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 320:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		break;
		
		default:
		break;
	}
	LCD_WriteData(b + '0');
 324:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <b>
 328:	80 5d       	subi	r24, 0xD0	; 208
 32a:	09 df       	rcall	.-494    	; 0x13e <LCD_WriteData>
	LCD_Cursor(1);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	f0 ce       	rjmp	.-544    	; 0x110 <LCD_Cursor>
 330:	08 95       	ret
 332:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <b>
			break;
	}
	//State Action
	switch(state){
		case init:
		b = 0;
 336:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
		count = 0;
 33a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 33e:	f2 cf       	rjmp	.-28     	; 0x324 <tick+0xf2>
		break;
 340:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <b>
		
		case reset:
		b = 0;
 344:	ef cf       	rjmp	.-34     	; 0x324 <tick+0xf2>
		break;
 346:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		case maintance:
		
		break;
		
		case sub:
		count++;
 34a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 354:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 358:	e5 cf       	rjmp	.-54     	; 0x324 <tick+0xf2>
		break;
 35a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		
		case add:
		count++;
 35e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 368:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 36c:	db cf       	rjmp	.-74     	; 0x324 <tick+0xf2>

0000036e <main>:
		break;
 36e:	11 b8       	out	0x01, r1	; 1
/* Replace with your application code */
enum State {start,init,maintance,reset,sub, subRel,add, addRel} state;

int main(void)
{
	DDRA = 0x00;PORTA = 0xFF;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 374:	84 b9       	out	0x04, r24	; 4
 376:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 378:	87 b9       	out	0x07, r24	; 7
 37a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	1b b8       	out	0x0b, r1	; 11
	TimerSet(PERIOD);
 380:	64 e6       	ldi	r22, 0x64	; 100
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	43 df       	rcall	.-378    	; 0x210 <TimerSet>
	TimerOn();
 38a:	e2 de       	rcall	.-572    	; 0x150 <TimerOn>
	LCD_init();
 38c:	c9 de       	rcall	.-622    	; 0x120 <LCD_init>
	state = start;
 38e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state>
    while (1) 
    {
		tick();
 392:	4f df       	rcall	.-354    	; 0x232 <tick>
 394:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <TimerFlag>
		while(!TimerFlag){}
 398:	88 23       	and	r24, r24
 39a:	e1 f3       	breq	.-8      	; 0x394 <main+0x26>
 39c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <TimerFlag>
		TimerFlag = 0;
 3a0:	f8 cf       	rjmp	.-16     	; 0x392 <main+0x24>

000003a2 <__tablejump2__>:
	}
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	00 24       	eor	r0, r0
 3a8:	00 1c       	adc	r0, r0
 3aa:	0b be       	out	0x3b, r0	; 59
 3ac:	07 90       	elpm	r0, Z+
 3ae:	f6 91       	elpm	r31, Z
 3b0:	e0 2d       	mov	r30, r0
 3b2:	09 94       	ijmp

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
