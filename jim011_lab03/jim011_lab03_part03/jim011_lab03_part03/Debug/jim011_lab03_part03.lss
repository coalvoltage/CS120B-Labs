
jim011_lab03_part03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008be  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	90 c0       	rjmp	.+288    	; 0x1bc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetBit>:
#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <GetBit+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a 81       	ldd	r18, Y+2	; 0x02
  b4:	22 2f       	mov	r18, r18
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GetBit+0x20>
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <GetBit+0x1c>
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	99 27       	eor	r25, r25
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	89 2b       	or	r24, r25
  ca:	09 f4       	brne	.+2      	; 0xce <GetBit+0x30>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	82 2f       	mov	r24, r18
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <main+0xa>
  e4:	1f 92       	push	r1
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF;
  ea:	81 e2       	ldi	r24, 0x21	; 33
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	10 82       	st	Z, r1
  f2:	82 e2       	ldi	r24, 0x22	; 34
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
  fc:	87 e2       	ldi	r24, 0x27	; 39
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	10 82       	st	Z, r1
	unsigned char tempA;
	unsigned char seatbeltAndIgn;
	unsigned char tempC;
    while (1) 
    {
		tempA = PINA & 0x0F;
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	8a 83       	std	Y+2, r24	; 0x02
		seatbeltAndIgn = PINA;
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	8b 83       	std	Y+3, r24	; 0x03
		if(tempA > 12) {
 124:	8a 81       	ldd	r24, Y+2	; 0x02
 126:	8d 30       	cpi	r24, 0x0D	; 13
 128:	18 f0       	brcs	.+6      	; 0x130 <main+0x56>
			tempC = 0x3F;
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	1f c0       	rjmp	.+62     	; 0x16e <main+0x94>
		}
		else if(tempA > 9) {
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	8a 30       	cpi	r24, 0x0A	; 10
 134:	18 f0       	brcs	.+6      	; 0x13c <main+0x62>
			tempC = 0x3E;
 136:	8e e3       	ldi	r24, 0x3E	; 62
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	19 c0       	rjmp	.+50     	; 0x16e <main+0x94>
		}
		else if(tempA > 6) {
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	87 30       	cpi	r24, 0x07	; 7
 140:	18 f0       	brcs	.+6      	; 0x148 <main+0x6e>
			tempC = 0x3B;
 142:	8b e3       	ldi	r24, 0x3B	; 59
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	13 c0       	rjmp	.+38     	; 0x16e <main+0x94>
		}
		else if(tempA > 4) {
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	85 30       	cpi	r24, 0x05	; 5
 14c:	18 f0       	brcs	.+6      	; 0x154 <main+0x7a>
			tempC = 0x38;
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	0d c0       	rjmp	.+26     	; 0x16e <main+0x94>
		}
		else if(tempA > 2) {
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	18 f0       	brcs	.+6      	; 0x160 <main+0x86>
			tempC = 0x30;
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	07 c0       	rjmp	.+14     	; 0x16e <main+0x94>
		}
		else if(tempA > 0) {
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	88 23       	and	r24, r24
 164:	19 f0       	breq	.+6      	; 0x16c <main+0x92>
			tempC = 0x20;
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	01 c0       	rjmp	.+2      	; 0x16e <main+0x94>
		}
		else {
			tempC = 0x00;
 16c:	19 82       	std	Y+1, r1	; 0x01
		}
		if (tempA <= 4){
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	85 30       	cpi	r24, 0x05	; 5
 172:	18 f4       	brcc	.+6      	; 0x17a <main+0xa0>
			tempC = tempC | 0x40;
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 64       	ori	r24, 0x40	; 64
 178:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(~GetBit(seatbeltAndIgn, 6) & GetBit(seatbeltAndIgn, 5) & GetBit(seatbeltAndIgn, 4)) {
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	8f df       	rcall	.-226    	; 0x9e <GetBit>
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	8c 01       	movw	r16, r24
 186:	00 95       	com	r16
 188:	10 95       	com	r17
 18a:	65 e0       	ldi	r22, 0x05	; 5
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	87 df       	rcall	.-242    	; 0x9e <GetBit>
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 23       	and	r16, r24
 196:	19 23       	and	r17, r25
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	80 df       	rcall	.-256    	; 0x9e <GetBit>
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	80 23       	and	r24, r16
 1a4:	91 23       	and	r25, r17
 1a6:	89 2b       	or	r24, r25
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <main+0xd6>
			tempC = tempC | 0x80;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	89 83       	std	Y+1, r24	; 0x01
		}
		
		PORTC = tempC;
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	29 81       	ldd	r18, Y+1	; 0x01
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
		
    }
 1ba:	a9 cf       	rjmp	.-174    	; 0x10e <main+0x34>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
