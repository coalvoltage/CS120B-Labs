
jim011_lab09_part02_actually.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800124  00800124  00000834  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b48  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d2  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	65 01       	movw	r12, r10
  8e:	69 01       	movw	r12, r18
  90:	6d 01       	movw	r12, r26
  92:	86 01       	movw	r16, r12
  94:	90 01       	movw	r18, r0
  96:	94 01       	movw	r18, r8
  98:	9e 01       	movw	r18, r28
  9a:	a2 01       	movw	r20, r4
  9c:	ad 01       	movw	r20, r26

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f7 e0       	ldi	r31, 0x07	; 7
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a4 32       	cpi	r26, 0x24	; 36
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a4 e2       	ldi	r26, 0x24	; 36
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a8 33       	cpi	r26, 0x38	; 56
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	ba d1       	rcall	.+884    	; 0x44a <main>
  d6:	50 c3       	rjmp	.+1696   	; 0x778 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  da:	8b e0       	ldi	r24, 0x0B	; 11
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  e0:	8d e7       	ldi	r24, 0x7D	; 125
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
  fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 102:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 106:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 10a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 10e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 112:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 116:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
 11a:	8f b7       	in	r24, 0x3f	; 63
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8f bf       	out	0x3f, r24	; 63
 120:	08 95       	ret

00000122 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 134:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_avr_timer_cntcurr>
 138:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x1>
 13c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_avr_timer_cntcurr+0x2>
 140:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x3>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	a1 09       	sbc	r26, r1
 148:	b1 09       	sbc	r27, r1
 14a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 14e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 152:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 156:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 15a:	89 2b       	or	r24, r25
 15c:	8a 2b       	or	r24, r26
 15e:	8b 2b       	or	r24, r27
 160:	99 f4       	brne	.+38     	; 0x188 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 168:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
 16c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 170:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 174:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 178:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr>
 17c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x1>
 180:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <_avr_timer_cntcurr+0x2>
 184:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <_avr_timer_cntcurr+0x3>
	}
}
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 19a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <_avr_timer_M>
 19e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <_avr_timer_M+0x1>
 1a2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_avr_timer_M+0x2>
 1a6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1aa:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <_avr_timer_cntcurr>
 1ae:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <_avr_timer_cntcurr+0x1>
 1b2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr+0x2>
 1b6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x3>
 1ba:	08 95       	ret

000001bc <set_PWM>:
}

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	6b 01       	movw	r12, r22
 1c6:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <__data_end>
 1d0:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <__data_end+0x1>
 1d4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
 1d8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x3>
 1dc:	4b d1       	rcall	.+662    	; 0x474 <__cmpsf2>
 1de:	88 23       	and	r24, r24
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <set_PWM+0x28>
 1e2:	40 c0       	rjmp	.+128    	; 0x264 <set_PWM+0xa8>
		if (!frequency) { TCCR0B &= 0x08; } //stops timer/counter
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	a9 01       	movw	r20, r18
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	42 d1       	rcall	.+644    	; 0x474 <__cmpsf2>
 1f0:	81 11       	cpse	r24, r1
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <set_PWM+0x40>
 1f4:	85 b5       	in	r24, 0x25	; 37
 1f6:	88 70       	andi	r24, 0x08	; 8
 1f8:	85 bd       	out	0x25, r24	; 37
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <set_PWM+0x46>
		else { TCCR0B |= 0x03; } // resumes/continues timer/counter
 1fc:	85 b5       	in	r24, 0x25	; 37
 1fe:	83 60       	ori	r24, 0x03	; 3
 200:	85 bd       	out	0x25, r24	; 37
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR0A = 0xFFFF; }
 202:	28 e5       	ldi	r18, 0x58	; 88
 204:	39 e3       	ldi	r19, 0x39	; 57
 206:	44 e7       	ldi	r20, 0x74	; 116
 208:	5f e3       	ldi	r21, 0x3F	; 63
 20a:	c7 01       	movw	r24, r14
 20c:	b6 01       	movw	r22, r12
 20e:	32 d1       	rcall	.+612    	; 0x474 <__cmpsf2>
 210:	88 23       	and	r24, r24
 212:	1c f4       	brge	.+6      	; 0x21a <set_PWM+0x5e>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	87 bd       	out	0x27, r24	; 39
 218:	1c c0       	rjmp	.+56     	; 0x252 <set_PWM+0x96>
		
		// prevents OCR0A from underflowing, using prescaler 64                    // 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR0A = 0x0000; }
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	34 e2       	ldi	r19, 0x24	; 36
 21e:	44 ef       	ldi	r20, 0xF4	; 244
 220:	56 e4       	ldi	r21, 0x46	; 70
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	38 d2       	rcall	.+1136   	; 0x698 <__gesf2>
 228:	18 16       	cp	r1, r24
 22a:	14 f4       	brge	.+4      	; 0x230 <set_PWM+0x74>
 22c:	17 bc       	out	0x27, r1	; 39
 22e:	11 c0       	rjmp	.+34     	; 0x252 <set_PWM+0x96>
		
		// set OCR3A based on desired frequency
		else { OCR0A = (short)(8000000 / (128 * frequency)) - 1; }
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	53 e4       	ldi	r21, 0x43	; 67
 238:	c7 01       	movw	r24, r14
 23a:	b6 01       	movw	r22, r12
 23c:	31 d2       	rcall	.+1122   	; 0x6a0 <__mulsf3>
 23e:	9b 01       	movw	r18, r22
 240:	ac 01       	movw	r20, r24
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	74 e2       	ldi	r23, 0x24	; 36
 246:	84 ef       	ldi	r24, 0xF4	; 244
 248:	9a e4       	ldi	r25, 0x4A	; 74
 24a:	18 d1       	rcall	.+560    	; 0x47c <__divsf3>
 24c:	7f d1       	rcall	.+766    	; 0x54c <__fixsfsi>
 24e:	61 50       	subi	r22, 0x01	; 1
 250:	67 bd       	out	0x27, r22	; 39

		TCNT0 = 0; // resets counter
 252:	16 bc       	out	0x26, r1	; 38
		current_frequency = frequency; // Updates the current frequency
 254:	c0 92 24 01 	sts	0x0124, r12	; 0x800124 <__data_end>
 258:	d0 92 25 01 	sts	0x0125, r13	; 0x800125 <__data_end+0x1>
 25c:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <__data_end+0x2>
 260:	f0 92 27 01 	sts	0x0127, r15	; 0x800127 <__data_end+0x3>
	}
}
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	08 95       	ret

0000026e <PWM_on>:

void PWM_on() {
	TCCR0A = (1 << WGM02) | (1 << WGM00) | (1 << COM0A0);
 26e:	89 e4       	ldi	r24, 0x49	; 73
 270:	84 bd       	out	0x24, r24	; 36
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 272:	8b e0       	ldi	r24, 0x0B	; 11
 274:	85 bd       	out	0x25, r24	; 37
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	cb 01       	movw	r24, r22
 27c:	9f cf       	rjmp	.-194    	; 0x1bc <set_PWM>
 27e:	08 95       	ret

00000280 <PWM_off>:
}

void PWM_off() {
	TCCR0A = 0x00;
 280:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 282:	15 bc       	out	0x25, r1	; 37
 284:	08 95       	ret

00000286 <Tick>:
	}
}

void Tick() {
	//Input
	tempA = (~PINA) & 0x07;
 286:	80 b1       	in	r24, 0x00	; 0
 288:	80 95       	com	r24
 28a:	98 2f       	mov	r25, r24
 28c:	97 70       	andi	r25, 0x07	; 7
 28e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <tempA>
	
	button1 = tempA & 0x01;
 292:	38 2f       	mov	r19, r24
 294:	31 70       	andi	r19, 0x01	; 1
 296:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <button1>
	button2 = (tempA & 0x02) >> 1;
 29a:	81 fb       	bst	r24, 1
 29c:	99 27       	eor	r25, r25
 29e:	90 f9       	bld	r25, 0
 2a0:	49 2f       	mov	r20, r25
 2a2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <button2>
	button3 = (tempA & 0x04) >> 2;
 2a6:	82 fb       	bst	r24, 2
 2a8:	88 27       	eor	r24, r24
 2aa:	80 f9       	bld	r24, 0
 2ac:	58 2f       	mov	r21, r24
 2ae:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <button3>
	//Transition
	switch(state) {
 2b2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <state>
 2b6:	82 2f       	mov	r24, r18
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	89 30       	cpi	r24, 0x09	; 9
 2bc:	91 05       	cpc	r25, r1
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <Tick+0x3c>
 2c0:	50 c0       	rjmp	.+160    	; 0x362 <Tick+0xdc>
 2c2:	fc 01       	movw	r30, r24
 2c4:	ea 5b       	subi	r30, 0xBA	; 186
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	4e c2       	rjmp	.+1180   	; 0x766 <__tablejump2__>
		case start:
		state = init;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 2d0:	55 c0       	rjmp	.+170    	; 0x37c <Tick+0xf6>
		break;
		
		case init:
		state = wait;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
		break;
 2d8:	ae c0       	rjmp	.+348    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case wait:
		if(button2 && !button1 && !button3) {
 2da:	44 23       	and	r20, r20
 2dc:	41 f0       	breq	.+16     	; 0x2ee <Tick+0x68>
 2de:	31 11       	cpse	r19, r1
 2e0:	aa c0       	rjmp	.+340    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 2e2:	51 11       	cpse	r21, r1
 2e4:	a8 c0       	rjmp	.+336    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = toggle;
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 2ec:	a4 c0       	rjmp	.+328    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}
		else if(!button2 && button1 && !button3) {
 2ee:	33 23       	and	r19, r19
 2f0:	31 f0       	breq	.+12     	; 0x2fe <Tick+0x78>
 2f2:	51 11       	cpse	r21, r1
 2f4:	a0 c0       	rjmp	.+320    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = upScale;
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 2fc:	9c c0       	rjmp	.+312    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}
		else if(!button2 && !button1 && button3) {
 2fe:	55 23       	and	r21, r21
 300:	09 f4       	brne	.+2      	; 0x304 <Tick+0x7e>
 302:	99 c0       	rjmp	.+306    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = downScale;
 304:	87 e0       	ldi	r24, 0x07	; 7
 306:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 30a:	95 c0       	rjmp	.+298    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}
		break;
		
		case toggle:
		if(!button2 && !button1 && !button3) {
 30c:	41 11       	cpse	r20, r1
 30e:	93 c0       	rjmp	.+294    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 310:	31 11       	cpse	r19, r1
 312:	91 c0       	rjmp	.+290    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 314:	51 11       	cpse	r21, r1
 316:	8f c0       	rjmp	.+286    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = toggleRelease;
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 31e:	43 c0       	rjmp	.+134    	; 0x3a6 <Tick+0x120>
		}
		break;
		
		case toggleRelease:
		state = wait;
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
		break;
 326:	87 c0       	rjmp	.+270    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case upScale:
		if(!button2 && !button1 && !button3) {
 328:	41 11       	cpse	r20, r1
 32a:	85 c0       	rjmp	.+266    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 32c:	31 11       	cpse	r19, r1
 32e:	83 c0       	rjmp	.+262    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 330:	51 11       	cpse	r21, r1
 332:	81 c0       	rjmp	.+258    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = upScaleRelease;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 33a:	44 c0       	rjmp	.+136    	; 0x3c4 <Tick+0x13e>
		}
		break;
		
		case upScaleRelease:
		state = wait;
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
		break;
 342:	79 c0       	rjmp	.+242    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case downScale:
		if(!button2 && !button1 && button3) {
 344:	41 11       	cpse	r20, r1
 346:	77 c0       	rjmp	.+238    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 348:	31 11       	cpse	r19, r1
 34a:	75 c0       	rjmp	.+234    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 34c:	55 23       	and	r21, r21
 34e:	09 f4       	brne	.+2      	; 0x352 <Tick+0xcc>
 350:	72 c0       	rjmp	.+228    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			state = downScaleRelease;
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
 358:	52 c0       	rjmp	.+164    	; 0x3fe <Tick+0x178>
		}
		break;
		
		case downScaleRelease:
		state = wait;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <state>
		break;
 360:	6a c0       	rjmp	.+212    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		default:
		break;
	}
	//Action
	switch(state) {
 362:	24 30       	cpi	r18, 0x04	; 4
 364:	01 f1       	breq	.+64     	; 0x3a6 <Tick+0x120>
 366:	20 f4       	brcc	.+8      	; 0x370 <Tick+0xea>
 368:	21 30       	cpi	r18, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <Tick+0xe8>
 36c:	64 c0       	rjmp	.+200    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 36e:	06 c0       	rjmp	.+12     	; 0x37c <Tick+0xf6>
 370:	26 30       	cpi	r18, 0x06	; 6
 372:	41 f1       	breq	.+80     	; 0x3c4 <Tick+0x13e>
 374:	28 30       	cpi	r18, 0x08	; 8
 376:	09 f4       	brne	.+2      	; 0x37a <Tick+0xf4>
 378:	42 c0       	rjmp	.+132    	; 0x3fe <Tick+0x178>
 37a:	5d c0       	rjmp	.+186    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		case init:

		noteIndex = 0;
 37c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <noteIndex>
		freqOut = NOTEARRAY[0];
 380:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <NOTEARRAY>
 384:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <NOTEARRAY+0x1>
 388:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <NOTEARRAY+0x2>
 38c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <NOTEARRAY+0x3>
 390:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <freqOut>
 394:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <freqOut+0x1>
 398:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <freqOut+0x2>
 39c:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <freqOut+0x3>
		isOn = 0;
 3a0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <isOn>
		break;
 3a4:	48 c0       	rjmp	.+144    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case wait:
		break;
		
		case toggleRelease:
		if(isOn) {
 3a6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <isOn>
 3aa:	88 23       	and	r24, r24
			PWM_off();
 3ac:	11 f0       	breq	.+4      	; 0x3b2 <Tick+0x12c>
 3ae:	68 df       	rcall	.-304    	; 0x280 <PWM_off>
		}
		else {
			PWM_on();
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <Tick+0x12e>
 3b2:	5d df       	rcall	.-326    	; 0x26e <PWM_on>
		}
		isOn = !isOn;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <isOn>
 3ba:	91 11       	cpse	r25, r1
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <isOn>
		break;
 3c2:	39 c0       	rjmp	.+114    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case upScaleRelease:
		if(noteIndex < NOTEARRAYMAX) {
 3c4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <noteIndex>
 3c8:	87 30       	cpi	r24, 0x07	; 7
 3ca:	18 f4       	brcc	.+6      	; 0x3d2 <Tick+0x14c>
			noteIndex++;
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <noteIndex>
		}
		freqOut = NOTEARRAY[noteIndex];
 3d2:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <noteIndex>
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	e0 50       	subi	r30, 0x00	; 0
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	80 81       	ld	r24, Z
 3e6:	91 81       	ldd	r25, Z+1	; 0x01
 3e8:	a2 81       	ldd	r26, Z+2	; 0x02
 3ea:	b3 81       	ldd	r27, Z+3	; 0x03
 3ec:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <freqOut>
 3f0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <freqOut+0x1>
 3f4:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <freqOut+0x2>
 3f8:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <freqOut+0x3>
		break;
 3fc:	1c c0       	rjmp	.+56     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
		case downScaleRelease:
		if(noteIndex > 0) {
 3fe:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <noteIndex>
 402:	88 23       	and	r24, r24
 404:	19 f0       	breq	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			noteIndex--;
 406:	81 50       	subi	r24, 0x01	; 1
 408:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <noteIndex>
		}
		freqOut = NOTEARRAY[noteIndex];
 40c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <noteIndex>
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	e0 50       	subi	r30, 0x00	; 0
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	a2 81       	ldd	r26, Z+2	; 0x02
 424:	b3 81       	ldd	r27, Z+3	; 0x03
 426:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <freqOut>
 42a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <freqOut+0x1>
 42e:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <freqOut+0x2>
 432:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <freqOut+0x3>
		break;
		
		default:
		break;
	}
	set_PWM(freqOut);
 436:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <freqOut>
 43a:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <freqOut+0x1>
 43e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <freqOut+0x2>
 442:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <freqOut+0x3>
 446:	ba ce       	rjmp	.-652    	; 0x1bc <set_PWM>
 448:	08 95       	ret

0000044a <main>:
double freqOut = 0.00;
void Tick();

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 44a:	11 b8       	out	0x01, r1	; 1
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x08; PORTB = 0x00;
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	84 b9       	out	0x04, r24	; 4
 454:	15 b8       	out	0x05, r1	; 5
	TimerSet(PERIOD);
 456:	64 e6       	ldi	r22, 0x64	; 100
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	9d de       	rcall	.-710    	; 0x19a <TimerSet>
	TimerOn();
 460:	3c de       	rcall	.-904    	; 0xda <TimerOn>
	PWM_on();
 462:	05 df       	rcall	.-502    	; 0x26e <PWM_on>
 464:	10 df       	rcall	.-480    	; 0x286 <Tick>
	
	while (1)
	{
		Tick();
 466:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TimerFlag>
		while(!TimerFlag){}
 46a:	88 23       	and	r24, r24
 46c:	e1 f3       	breq	.-8      	; 0x466 <main+0x1c>
 46e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <TimerFlag>
		TimerFlag = 0;
 472:	f8 cf       	rjmp	.-16     	; 0x464 <main+0x1a>

00000474 <__cmpsf2>:
 474:	9c d0       	rcall	.+312    	; 0x5ae <__fp_cmp>
		
	}
 476:	08 f4       	brcc	.+2      	; 0x47a <__cmpsf2+0x6>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	08 95       	ret

0000047c <__divsf3>:
 47c:	0c d0       	rcall	.+24     	; 0x496 <__divsf3x>
 47e:	d2 c0       	rjmp	.+420    	; 0x624 <__fp_round>
 480:	ca d0       	rcall	.+404    	; 0x616 <__fp_pscB>
 482:	40 f0       	brcs	.+16     	; 0x494 <__divsf3+0x18>
 484:	c1 d0       	rcall	.+386    	; 0x608 <__fp_pscA>
 486:	30 f0       	brcs	.+12     	; 0x494 <__divsf3+0x18>
 488:	21 f4       	brne	.+8      	; 0x492 <__divsf3+0x16>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	19 f0       	breq	.+6      	; 0x494 <__divsf3+0x18>
 48e:	b3 c0       	rjmp	.+358    	; 0x5f6 <__fp_inf>
 490:	51 11       	cpse	r21, r1
 492:	fc c0       	rjmp	.+504    	; 0x68c <__fp_szero>
 494:	b6 c0       	rjmp	.+364    	; 0x602 <__fp_nan>

00000496 <__divsf3x>:
 496:	d7 d0       	rcall	.+430    	; 0x646 <__fp_split3>
 498:	98 f3       	brcs	.-26     	; 0x480 <__divsf3+0x4>

0000049a <__divsf3_pse>:
 49a:	99 23       	and	r25, r25
 49c:	c9 f3       	breq	.-14     	; 0x490 <__divsf3+0x14>
 49e:	55 23       	and	r21, r21
 4a0:	b1 f3       	breq	.-20     	; 0x48e <__divsf3+0x12>
 4a2:	95 1b       	sub	r25, r21
 4a4:	55 0b       	sbc	r21, r21
 4a6:	bb 27       	eor	r27, r27
 4a8:	aa 27       	eor	r26, r26
 4aa:	62 17       	cp	r22, r18
 4ac:	73 07       	cpc	r23, r19
 4ae:	84 07       	cpc	r24, r20
 4b0:	38 f0       	brcs	.+14     	; 0x4c0 <__divsf3_pse+0x26>
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	44 1f       	adc	r20, r20
 4bc:	aa 1f       	adc	r26, r26
 4be:	a9 f3       	breq	.-22     	; 0x4aa <__divsf3_pse+0x10>
 4c0:	33 d0       	rcall	.+102    	; 0x528 <__divsf3_pse+0x8e>
 4c2:	0e 2e       	mov	r0, r30
 4c4:	3a f0       	brmi	.+14     	; 0x4d4 <__divsf3_pse+0x3a>
 4c6:	e0 e8       	ldi	r30, 0x80	; 128
 4c8:	30 d0       	rcall	.+96     	; 0x52a <__divsf3_pse+0x90>
 4ca:	91 50       	subi	r25, 0x01	; 1
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	e6 95       	lsr	r30
 4d0:	00 1c       	adc	r0, r0
 4d2:	ca f7       	brpl	.-14     	; 0x4c6 <__divsf3_pse+0x2c>
 4d4:	29 d0       	rcall	.+82     	; 0x528 <__divsf3_pse+0x8e>
 4d6:	fe 2f       	mov	r31, r30
 4d8:	27 d0       	rcall	.+78     	; 0x528 <__divsf3_pse+0x8e>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	bb 1f       	adc	r27, r27
 4e2:	26 17       	cp	r18, r22
 4e4:	37 07       	cpc	r19, r23
 4e6:	48 07       	cpc	r20, r24
 4e8:	ab 07       	cpc	r26, r27
 4ea:	b0 e8       	ldi	r27, 0x80	; 128
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <__divsf3_pse+0x56>
 4ee:	bb 0b       	sbc	r27, r27
 4f0:	80 2d       	mov	r24, r0
 4f2:	bf 01       	movw	r22, r30
 4f4:	ff 27       	eor	r31, r31
 4f6:	93 58       	subi	r25, 0x83	; 131
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	2a f0       	brmi	.+10     	; 0x506 <__divsf3_pse+0x6c>
 4fc:	9e 3f       	cpi	r25, 0xFE	; 254
 4fe:	51 05       	cpc	r21, r1
 500:	68 f0       	brcs	.+26     	; 0x51c <__divsf3_pse+0x82>
 502:	79 c0       	rjmp	.+242    	; 0x5f6 <__fp_inf>
 504:	c3 c0       	rjmp	.+390    	; 0x68c <__fp_szero>
 506:	5f 3f       	cpi	r21, 0xFF	; 255
 508:	ec f3       	brlt	.-6      	; 0x504 <__divsf3_pse+0x6a>
 50a:	98 3e       	cpi	r25, 0xE8	; 232
 50c:	dc f3       	brlt	.-10     	; 0x504 <__divsf3_pse+0x6a>
 50e:	86 95       	lsr	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f7 95       	ror	r31
 518:	9f 5f       	subi	r25, 0xFF	; 255
 51a:	c9 f7       	brne	.-14     	; 0x50e <__divsf3_pse+0x74>
 51c:	88 0f       	add	r24, r24
 51e:	91 1d       	adc	r25, r1
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	97 f9       	bld	r25, 7
 526:	08 95       	ret
 528:	e1 e0       	ldi	r30, 0x01	; 1
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	bb 1f       	adc	r27, r27
 532:	62 17       	cp	r22, r18
 534:	73 07       	cpc	r23, r19
 536:	84 07       	cpc	r24, r20
 538:	ba 07       	cpc	r27, r26
 53a:	20 f0       	brcs	.+8      	; 0x544 <__divsf3_pse+0xaa>
 53c:	62 1b       	sub	r22, r18
 53e:	73 0b       	sbc	r23, r19
 540:	84 0b       	sbc	r24, r20
 542:	ba 0b       	sbc	r27, r26
 544:	ee 1f       	adc	r30, r30
 546:	88 f7       	brcc	.-30     	; 0x52a <__divsf3_pse+0x90>
 548:	e0 95       	com	r30
 54a:	08 95       	ret

0000054c <__fixsfsi>:
 54c:	04 d0       	rcall	.+8      	; 0x556 <__fixunssfsi>
 54e:	68 94       	set
 550:	b1 11       	cpse	r27, r1
 552:	9c c0       	rjmp	.+312    	; 0x68c <__fp_szero>
 554:	08 95       	ret

00000556 <__fixunssfsi>:
 556:	7f d0       	rcall	.+254    	; 0x656 <__fp_splitA>
 558:	88 f0       	brcs	.+34     	; 0x57c <__fixunssfsi+0x26>
 55a:	9f 57       	subi	r25, 0x7F	; 127
 55c:	90 f0       	brcs	.+36     	; 0x582 <__fixunssfsi+0x2c>
 55e:	b9 2f       	mov	r27, r25
 560:	99 27       	eor	r25, r25
 562:	b7 51       	subi	r27, 0x17	; 23
 564:	a0 f0       	brcs	.+40     	; 0x58e <__fixunssfsi+0x38>
 566:	d1 f0       	breq	.+52     	; 0x59c <__fixunssfsi+0x46>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	1a f0       	brmi	.+6      	; 0x578 <__fixunssfsi+0x22>
 572:	ba 95       	dec	r27
 574:	c9 f7       	brne	.-14     	; 0x568 <__fixunssfsi+0x12>
 576:	12 c0       	rjmp	.+36     	; 0x59c <__fixunssfsi+0x46>
 578:	b1 30       	cpi	r27, 0x01	; 1
 57a:	81 f0       	breq	.+32     	; 0x59c <__fixunssfsi+0x46>
 57c:	86 d0       	rcall	.+268    	; 0x68a <__fp_zero>
 57e:	b1 e0       	ldi	r27, 0x01	; 1
 580:	08 95       	ret
 582:	83 c0       	rjmp	.+262    	; 0x68a <__fp_zero>
 584:	67 2f       	mov	r22, r23
 586:	78 2f       	mov	r23, r24
 588:	88 27       	eor	r24, r24
 58a:	b8 5f       	subi	r27, 0xF8	; 248
 58c:	39 f0       	breq	.+14     	; 0x59c <__fixunssfsi+0x46>
 58e:	b9 3f       	cpi	r27, 0xF9	; 249
 590:	cc f3       	brlt	.-14     	; 0x584 <__fixunssfsi+0x2e>
 592:	86 95       	lsr	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b3 95       	inc	r27
 59a:	d9 f7       	brne	.-10     	; 0x592 <__fixunssfsi+0x3c>
 59c:	3e f4       	brtc	.+14     	; 0x5ac <__fixunssfsi+0x56>
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__fp_cmp>:
 5ae:	99 0f       	add	r25, r25
 5b0:	00 08       	sbc	r0, r0
 5b2:	55 0f       	add	r21, r21
 5b4:	aa 0b       	sbc	r26, r26
 5b6:	e0 e8       	ldi	r30, 0x80	; 128
 5b8:	fe ef       	ldi	r31, 0xFE	; 254
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	e8 07       	cpc	r30, r24
 5c0:	f9 07       	cpc	r31, r25
 5c2:	c0 f0       	brcs	.+48     	; 0x5f4 <__fp_cmp+0x46>
 5c4:	12 16       	cp	r1, r18
 5c6:	13 06       	cpc	r1, r19
 5c8:	e4 07       	cpc	r30, r20
 5ca:	f5 07       	cpc	r31, r21
 5cc:	98 f0       	brcs	.+38     	; 0x5f4 <__fp_cmp+0x46>
 5ce:	62 1b       	sub	r22, r18
 5d0:	73 0b       	sbc	r23, r19
 5d2:	84 0b       	sbc	r24, r20
 5d4:	95 0b       	sbc	r25, r21
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <__fp_cmp+0x38>
 5d8:	0a 26       	eor	r0, r26
 5da:	61 f0       	breq	.+24     	; 0x5f4 <__fp_cmp+0x46>
 5dc:	23 2b       	or	r18, r19
 5de:	24 2b       	or	r18, r20
 5e0:	25 2b       	or	r18, r21
 5e2:	21 f4       	brne	.+8      	; 0x5ec <__fp_cmp+0x3e>
 5e4:	08 95       	ret
 5e6:	0a 26       	eor	r0, r26
 5e8:	09 f4       	brne	.+2      	; 0x5ec <__fp_cmp+0x3e>
 5ea:	a1 40       	sbci	r26, 0x01	; 1
 5ec:	a6 95       	lsr	r26
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	81 1d       	adc	r24, r1
 5f2:	81 1d       	adc	r24, r1
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_split3>:
 646:	57 fd       	sbrc	r21, 7
 648:	90 58       	subi	r25, 0x80	; 128
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	59 f0       	breq	.+22     	; 0x666 <__fp_splitA+0x10>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	71 f0       	breq	.+28     	; 0x670 <__fp_splitA+0x1a>
 654:	47 95       	ror	r20

00000656 <__fp_splitA>:
 656:	88 0f       	add	r24, r24
 658:	97 fb       	bst	r25, 7
 65a:	99 1f       	adc	r25, r25
 65c:	61 f0       	breq	.+24     	; 0x676 <__fp_splitA+0x20>
 65e:	9f 3f       	cpi	r25, 0xFF	; 255
 660:	79 f0       	breq	.+30     	; 0x680 <__fp_splitA+0x2a>
 662:	87 95       	ror	r24
 664:	08 95       	ret
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	55 1f       	adc	r21, r21
 66e:	f2 cf       	rjmp	.-28     	; 0x654 <__fp_split3+0xe>
 670:	46 95       	lsr	r20
 672:	f1 df       	rcall	.-30     	; 0x656 <__fp_splitA>
 674:	08 c0       	rjmp	.+16     	; 0x686 <__fp_splitA+0x30>
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	99 1f       	adc	r25, r25
 67e:	f1 cf       	rjmp	.-30     	; 0x662 <__fp_splitA+0xc>
 680:	86 95       	lsr	r24
 682:	71 05       	cpc	r23, r1
 684:	61 05       	cpc	r22, r1
 686:	08 94       	sec
 688:	08 95       	ret

0000068a <__fp_zero>:
 68a:	e8 94       	clt

0000068c <__fp_szero>:
 68c:	bb 27       	eor	r27, r27
 68e:	66 27       	eor	r22, r22
 690:	77 27       	eor	r23, r23
 692:	cb 01       	movw	r24, r22
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__gesf2>:
 698:	8a df       	rcall	.-236    	; 0x5ae <__fp_cmp>
 69a:	08 f4       	brcc	.+2      	; 0x69e <__gesf2+0x6>
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__mulsf3>:
 6a0:	0b d0       	rcall	.+22     	; 0x6b8 <__mulsf3x>
 6a2:	c0 cf       	rjmp	.-128    	; 0x624 <__fp_round>
 6a4:	b1 df       	rcall	.-158    	; 0x608 <__fp_pscA>
 6a6:	28 f0       	brcs	.+10     	; 0x6b2 <__mulsf3+0x12>
 6a8:	b6 df       	rcall	.-148    	; 0x616 <__fp_pscB>
 6aa:	18 f0       	brcs	.+6      	; 0x6b2 <__mulsf3+0x12>
 6ac:	95 23       	and	r25, r21
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__mulsf3+0x12>
 6b0:	a2 cf       	rjmp	.-188    	; 0x5f6 <__fp_inf>
 6b2:	a7 cf       	rjmp	.-178    	; 0x602 <__fp_nan>
 6b4:	11 24       	eor	r1, r1
 6b6:	ea cf       	rjmp	.-44     	; 0x68c <__fp_szero>

000006b8 <__mulsf3x>:
 6b8:	c6 df       	rcall	.-116    	; 0x646 <__fp_split3>
 6ba:	a0 f3       	brcs	.-24     	; 0x6a4 <__mulsf3+0x4>

000006bc <__mulsf3_pse>:
 6bc:	95 9f       	mul	r25, r21
 6be:	d1 f3       	breq	.-12     	; 0x6b4 <__mulsf3+0x14>
 6c0:	95 0f       	add	r25, r21
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	55 1f       	adc	r21, r21
 6c6:	62 9f       	mul	r22, r18
 6c8:	f0 01       	movw	r30, r0
 6ca:	72 9f       	mul	r23, r18
 6cc:	bb 27       	eor	r27, r27
 6ce:	f0 0d       	add	r31, r0
 6d0:	b1 1d       	adc	r27, r1
 6d2:	63 9f       	mul	r22, r19
 6d4:	aa 27       	eor	r26, r26
 6d6:	f0 0d       	add	r31, r0
 6d8:	b1 1d       	adc	r27, r1
 6da:	aa 1f       	adc	r26, r26
 6dc:	64 9f       	mul	r22, r20
 6de:	66 27       	eor	r22, r22
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	66 1f       	adc	r22, r22
 6e6:	82 9f       	mul	r24, r18
 6e8:	22 27       	eor	r18, r18
 6ea:	b0 0d       	add	r27, r0
 6ec:	a1 1d       	adc	r26, r1
 6ee:	62 1f       	adc	r22, r18
 6f0:	73 9f       	mul	r23, r19
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	62 1f       	adc	r22, r18
 6f8:	83 9f       	mul	r24, r19
 6fa:	a0 0d       	add	r26, r0
 6fc:	61 1d       	adc	r22, r1
 6fe:	22 1f       	adc	r18, r18
 700:	74 9f       	mul	r23, r20
 702:	33 27       	eor	r19, r19
 704:	a0 0d       	add	r26, r0
 706:	61 1d       	adc	r22, r1
 708:	23 1f       	adc	r18, r19
 70a:	84 9f       	mul	r24, r20
 70c:	60 0d       	add	r22, r0
 70e:	21 1d       	adc	r18, r1
 710:	82 2f       	mov	r24, r18
 712:	76 2f       	mov	r23, r22
 714:	6a 2f       	mov	r22, r26
 716:	11 24       	eor	r1, r1
 718:	9f 57       	subi	r25, 0x7F	; 127
 71a:	50 40       	sbci	r21, 0x00	; 0
 71c:	8a f0       	brmi	.+34     	; 0x740 <__mulsf3_pse+0x84>
 71e:	e1 f0       	breq	.+56     	; 0x758 <__mulsf3_pse+0x9c>
 720:	88 23       	and	r24, r24
 722:	4a f0       	brmi	.+18     	; 0x736 <__mulsf3_pse+0x7a>
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	bb 1f       	adc	r27, r27
 72a:	66 1f       	adc	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	91 50       	subi	r25, 0x01	; 1
 732:	50 40       	sbci	r21, 0x00	; 0
 734:	a9 f7       	brne	.-22     	; 0x720 <__mulsf3_pse+0x64>
 736:	9e 3f       	cpi	r25, 0xFE	; 254
 738:	51 05       	cpc	r21, r1
 73a:	70 f0       	brcs	.+28     	; 0x758 <__mulsf3_pse+0x9c>
 73c:	5c cf       	rjmp	.-328    	; 0x5f6 <__fp_inf>
 73e:	a6 cf       	rjmp	.-180    	; 0x68c <__fp_szero>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	ec f3       	brlt	.-6      	; 0x73e <__mulsf3_pse+0x82>
 744:	98 3e       	cpi	r25, 0xE8	; 232
 746:	dc f3       	brlt	.-10     	; 0x73e <__mulsf3_pse+0x82>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	e7 95       	ror	r30
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	c1 f7       	brne	.-16     	; 0x748 <__mulsf3_pse+0x8c>
 758:	fe 2b       	or	r31, r30
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__tablejump2__>:
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	00 24       	eor	r0, r0
 76c:	00 1c       	adc	r0, r0
 76e:	0b be       	out	0x3b, r0	; 59
 770:	07 90       	elpm	r0, Z+
 772:	f6 91       	elpm	r31, Z
 774:	e0 2d       	mov	r30, r0
 776:	09 94       	ijmp

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
