
jim011_lab09_part02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000070c  000007a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  000007a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b03  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004dc  00000000  00000000  00001c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  00002717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d1       	rcall	.+808    	; 0x3ec <main>
  c4:	21 c3       	rjmp	.+1602   	; 0x708 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
  fc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 100:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 104:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 126:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 13c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 140:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 144:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 16a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 172:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
 19c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <set_PWM>:
}

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	6b 01       	movw	r12, r22
 1b4:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
 1ba:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
 1be:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
 1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
 1c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
 1ca:	25 d1       	rcall	.+586    	; 0x416 <__cmpsf2>
 1cc:	88 23       	and	r24, r24
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <set_PWM+0x28>
 1d0:	40 c0       	rjmp	.+128    	; 0x252 <set_PWM+0xa8>
		if (!frequency) { TCCR0B &= 0x08; } //stops timer/counter
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	a9 01       	movw	r20, r18
 1d8:	c7 01       	movw	r24, r14
 1da:	b6 01       	movw	r22, r12
 1dc:	1c d1       	rcall	.+568    	; 0x416 <__cmpsf2>
 1de:	81 11       	cpse	r24, r1
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <set_PWM+0x40>
 1e2:	85 b5       	in	r24, 0x25	; 37
 1e4:	88 70       	andi	r24, 0x08	; 8
 1e6:	85 bd       	out	0x25, r24	; 37
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <set_PWM+0x46>
		else { TCCR0B |= 0x03; } // resumes/continues timer/counter
 1ea:	85 b5       	in	r24, 0x25	; 37
 1ec:	83 60       	ori	r24, 0x03	; 3
 1ee:	85 bd       	out	0x25, r24	; 37
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR0A = 0xFFFF; }
 1f0:	28 e5       	ldi	r18, 0x58	; 88
 1f2:	39 e3       	ldi	r19, 0x39	; 57
 1f4:	44 e7       	ldi	r20, 0x74	; 116
 1f6:	5f e3       	ldi	r21, 0x3F	; 63
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	0c d1       	rcall	.+536    	; 0x416 <__cmpsf2>
 1fe:	88 23       	and	r24, r24
 200:	1c f4       	brge	.+6      	; 0x208 <set_PWM+0x5e>
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	87 bd       	out	0x27, r24	; 39
 206:	1c c0       	rjmp	.+56     	; 0x240 <set_PWM+0x96>
		
		// prevents OCR0A from underflowing, using prescaler 64                    // 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR0A = 0x0000; }
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	34 e2       	ldi	r19, 0x24	; 36
 20c:	44 ef       	ldi	r20, 0xF4	; 244
 20e:	56 e4       	ldi	r21, 0x46	; 70
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	12 d2       	rcall	.+1060   	; 0x63a <__gesf2>
 216:	18 16       	cp	r1, r24
 218:	14 f4       	brge	.+4      	; 0x21e <set_PWM+0x74>
 21a:	17 bc       	out	0x27, r1	; 39
 21c:	11 c0       	rjmp	.+34     	; 0x240 <set_PWM+0x96>
		
		// set OCR3A based on desired frequency
		else { OCR0A = (short)(8000000 / (128 * frequency)) - 1; }
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	53 e4       	ldi	r21, 0x43	; 67
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0b d2       	rcall	.+1046   	; 0x642 <__mulsf3>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	74 e2       	ldi	r23, 0x24	; 36
 234:	84 ef       	ldi	r24, 0xF4	; 244
 236:	9a e4       	ldi	r25, 0x4A	; 74
 238:	f2 d0       	rcall	.+484    	; 0x41e <__divsf3>
 23a:	59 d1       	rcall	.+690    	; 0x4ee <__fixsfsi>
 23c:	61 50       	subi	r22, 0x01	; 1
 23e:	67 bd       	out	0x27, r22	; 39

		TCNT0 = 0; // resets counter
 240:	16 bc       	out	0x26, r1	; 38
		current_frequency = frequency; // Updates the current frequency
 242:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <__data_end>
 246:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <__data_end+0x1>
 24a:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <__data_end+0x2>
 24e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <__data_end+0x3>
	}
}
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	08 95       	ret

0000025c <PWM_on>:

void PWM_on() {
	TCCR0A = (1 << WGM02) | (1 << WGM00) | (1 << COM0A0);
 25c:	89 e4       	ldi	r24, 0x49	; 73
 25e:	84 bd       	out	0x24, r24	; 36
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	85 bd       	out	0x25, r24	; 37
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	cb 01       	movw	r24, r22
 26a:	9f cf       	rjmp	.-194    	; 0x1aa <set_PWM>
 26c:	08 95       	ret

0000026e <PWM_off>:
}

void PWM_off() {
	TCCR0A = 0x00;
 26e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 270:	15 bc       	out	0x25, r1	; 37
 272:	08 95       	ret

00000274 <Tick>:
	}
}

void Tick() {
	//Input
	tempA = (~PINA) & 0x07;
 274:	80 b1       	in	r24, 0x00	; 0
 276:	80 95       	com	r24
 278:	98 2f       	mov	r25, r24
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tempA>
	
	button1 = tempA & 0x01;
 280:	28 2f       	mov	r18, r24
 282:	21 70       	andi	r18, 0x01	; 1
 284:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <button1>
	button2 = (tempA & 0x02) >> 1;
 288:	81 fb       	bst	r24, 1
 28a:	99 27       	eor	r25, r25
 28c:	90 f9       	bld	r25, 0
 28e:	39 2f       	mov	r19, r25
 290:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <button2>
	button3 = (tempA & 0x04) >> 2;
 294:	82 fb       	bst	r24, 2
 296:	88 27       	eor	r24, r24
 298:	80 f9       	bld	r24, 0
 29a:	98 2f       	mov	r25, r24
 29c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <button3>
	//Transition
	switch(state) {
 2a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <state>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	51 f0       	breq	.+20     	; 0x2bc <Tick+0x48>
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <Tick+0x40>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	59 f0       	breq	.+22     	; 0x2c4 <Tick+0x50>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	d1 f0       	breq	.+52     	; 0x2e6 <Tick+0x72>
 2b2:	2b c0       	rjmp	.+86     	; 0x30a <Tick+0x96>
		case start:
		state = init;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 2ba:	2e c0       	rjmp	.+92     	; 0x318 <Tick+0xa4>
		break;
		
		case init:
		state = wait;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
		break;
 2c2:	33 c0       	rjmp	.+102    	; 0x32a <Tick+0xb6>
		
		case wait:
		if((button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3)) {
 2c4:	22 23       	and	r18, r18
 2c6:	19 f0       	breq	.+6      	; 0x2ce <Tick+0x5a>
 2c8:	33 23       	and	r19, r19
 2ca:	21 f0       	breq	.+8      	; 0x2d4 <Tick+0x60>
 2cc:	0e c0       	rjmp	.+28     	; 0x2ea <Tick+0x76>
 2ce:	31 11       	cpse	r19, r1
 2d0:	84 c0       	rjmp	.+264    	; 0x3da <Tick+0x166>
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <Tick+0x6e>
 2d4:	99 23       	and	r25, r25
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <Tick+0x72>
 2d8:	21 11       	cpse	r18, r1
 2da:	13 c0       	rjmp	.+38     	; 0x302 <Tick+0x8e>
 2dc:	31 11       	cpse	r19, r1
 2de:	11 c0       	rjmp	.+34     	; 0x302 <Tick+0x8e>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Tick+0x72>
 2e2:	99 23       	and	r25, r25
 2e4:	71 f0       	breq	.+28     	; 0x302 <Tick+0x8e>
			state = pressed;
		}
		
		case pressed:
		if((button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3)) {
 2e6:	22 23       	and	r18, r18
 2e8:	21 f0       	breq	.+8      	; 0x2f2 <Tick+0x7e>
 2ea:	33 23       	and	r19, r19
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <Tick+0x7c>
 2ee:	6e c0       	rjmp	.+220    	; 0x3cc <Tick+0x158>
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <Tick+0x8e>
 2f2:	31 11       	cpse	r19, r1
 2f4:	6f c0       	rjmp	.+222    	; 0x3d4 <Tick+0x160>
 2f6:	99 23       	and	r25, r25
 2f8:	21 f0       	breq	.+8      	; 0x302 <Tick+0x8e>
			state = pressed;
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 300:	1e c0       	rjmp	.+60     	; 0x33e <Tick+0xca>
		}
		else {
			state = wait;
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 308:	10 c0       	rjmp	.+32     	; 0x32a <Tick+0xb6>
		
		default:
		break;
	}
	//Action
	switch(state) {
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	71 f0       	breq	.+28     	; 0x32a <Tick+0xb6>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	b1 f0       	breq	.+44     	; 0x33e <Tick+0xca>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	09 f0       	breq	.+2      	; 0x318 <Tick+0xa4>
 316:	50 c0       	rjmp	.+160    	; 0x3b8 <Tick+0x144>
		case init:
		freqOut = 0.00;
 318:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <freqOut>
 31c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <freqOut+0x1>
 320:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <freqOut+0x2>
 324:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <freqOut+0x3>
		break;
 328:	47 c0       	rjmp	.+142    	; 0x3b8 <Tick+0x144>
		
		case wait:
		freqOut = 0.00;
 32a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <freqOut>
 32e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <freqOut+0x1>
 332:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <freqOut+0x2>
 336:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <freqOut+0x3>
		PWM_off();
 33a:	99 df       	rcall	.-206    	; 0x26e <PWM_off>
		break;
		
		case pressed:
		PWM_on();
 33c:	3d c0       	rjmp	.+122    	; 0x3b8 <Tick+0x144>
 33e:	8e df       	rcall	.-228    	; 0x25c <PWM_on>
		if(button1 && !button2 && !button3){
 340:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <button1>
 344:	88 23       	and	r24, r24
 346:	a9 f0       	breq	.+42     	; 0x372 <Tick+0xfe>
 348:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <button2>
 34c:	81 11       	cpse	r24, r1
 34e:	33 c0       	rjmp	.+102    	; 0x3b6 <Tick+0x142>
 350:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <button3>
 354:	81 11       	cpse	r24, r1
 356:	2f c0       	rjmp	.+94     	; 0x3b6 <Tick+0x142>
			freqOut = NOTEC4;
 358:	84 ea       	ldi	r24, 0xA4	; 164
 35a:	90 ed       	ldi	r25, 0xD0	; 208
 35c:	a2 e8       	ldi	r26, 0x82	; 130
 35e:	b3 e4       	ldi	r27, 0x43	; 67
 360:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <freqOut>
 364:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <freqOut+0x1>
 368:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <freqOut+0x2>
 36c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <freqOut+0x3>
 370:	23 c0       	rjmp	.+70     	; 0x3b8 <Tick+0x144>
		}
		else if(!button1 && button2 && !button3){
 372:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <button2>
 376:	88 23       	and	r24, r24
 378:	a1 f1       	breq	.+104    	; 0x3e2 <Tick+0x16e>
 37a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <button3>
 37e:	81 11       	cpse	r24, r1
 380:	1a c0       	rjmp	.+52     	; 0x3b6 <Tick+0x142>
			freqOut = NOTED4;
 382:	8b e7       	ldi	r24, 0x7B	; 123
 384:	94 ed       	ldi	r25, 0xD4	; 212
 386:	a2 e9       	ldi	r26, 0x92	; 146
 388:	b3 e4       	ldi	r27, 0x43	; 67
 38a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <freqOut>
 38e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <freqOut+0x1>
 392:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <freqOut+0x2>
 396:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <freqOut+0x3>
 39a:	0e c0       	rjmp	.+28     	; 0x3b8 <Tick+0x144>
			//PWM_off();
		}
		else if(!button1 && !button2 && button3){
			freqOut = NOTEE4;
 39c:	84 ea       	ldi	r24, 0xA4	; 164
 39e:	90 ed       	ldi	r25, 0xD0	; 208
 3a0:	a4 ea       	ldi	r26, 0xA4	; 164
 3a2:	b3 e4       	ldi	r27, 0x43	; 67
 3a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <freqOut>
 3a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <freqOut+0x1>
 3ac:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <freqOut+0x2>
 3b0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <freqOut+0x3>
		}
		else {
			PWM_off();
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <Tick+0x144>
 3b6:	5b df       	rcall	.-330    	; 0x26e <PWM_off>
		break;
		
		default:
		break;
	}
	set_PWM(freqOut);
 3b8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <freqOut>
 3bc:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <freqOut+0x1>
 3c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <freqOut+0x2>
 3c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <freqOut+0x3>
 3c8:	f0 ce       	rjmp	.-544    	; 0x1aa <set_PWM>
}
 3ca:	08 95       	ret
		if((button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3)) {
			state = pressed;
		}
		
		case pressed:
		if((button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3)) {
 3cc:	99 23       	and	r25, r25
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <Tick+0x15e>
 3d0:	94 cf       	rjmp	.-216    	; 0x2fa <Tick+0x86>
 3d2:	97 cf       	rjmp	.-210    	; 0x302 <Tick+0x8e>
 3d4:	91 11       	cpse	r25, r1
 3d6:	95 cf       	rjmp	.-214    	; 0x302 <Tick+0x8e>
 3d8:	90 cf       	rjmp	.-224    	; 0x2fa <Tick+0x86>
		case init:
		state = wait;
		break;
		
		case wait:
		if((button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3)) {
 3da:	99 23       	and	r25, r25
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <Tick+0x16c>
 3de:	83 cf       	rjmp	.-250    	; 0x2e6 <Tick+0x72>
 3e0:	90 cf       	rjmp	.-224    	; 0x302 <Tick+0x8e>
		}
		else if(!button1 && button2 && !button3){
			freqOut = NOTED4;
			//PWM_off();
		}
		else if(!button1 && !button2 && button3){
 3e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <button3>
 3e6:	88 23       	and	r24, r24
 3e8:	31 f3       	breq	.-52     	; 0x3b6 <Tick+0x142>
 3ea:	d8 cf       	rjmp	.-80     	; 0x39c <Tick+0x128>

000003ec <main>:
double freqOut = 0.00;
void Tick();

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 3ec:	11 b8       	out	0x01, r1	; 1
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x08; PORTB = 0x00;
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	84 b9       	out	0x04, r24	; 4
 3f6:	15 b8       	out	0x05, r1	; 5
	TimerSet(PERIOD);
 3f8:	64 e6       	ldi	r22, 0x64	; 100
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	c3 de       	rcall	.-634    	; 0x188 <TimerSet>
	TimerOn();
 402:	62 de       	rcall	.-828    	; 0xc8 <TimerOn>
	PWM_on();
 404:	2b df       	rcall	.-426    	; 0x25c <PWM_on>
 406:	36 df       	rcall	.-404    	; 0x274 <Tick>
	
	while (1)
	{
		Tick();
 408:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
		while(!TimerFlag){}
 40c:	88 23       	and	r24, r24
 40e:	e1 f3       	breq	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
		TimerFlag = 0;
 414:	f8 cf       	rjmp	.-16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

00000416 <__cmpsf2>:
 416:	9c d0       	rcall	.+312    	; 0x550 <__fp_cmp>
		
	}
 418:	08 f4       	brcc	.+2      	; 0x41c <__cmpsf2+0x6>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret

0000041e <__divsf3>:
 41e:	0c d0       	rcall	.+24     	; 0x438 <__divsf3x>
 420:	d2 c0       	rjmp	.+420    	; 0x5c6 <__fp_round>
 422:	ca d0       	rcall	.+404    	; 0x5b8 <__fp_pscB>
 424:	40 f0       	brcs	.+16     	; 0x436 <__divsf3+0x18>
 426:	c1 d0       	rcall	.+386    	; 0x5aa <__fp_pscA>
 428:	30 f0       	brcs	.+12     	; 0x436 <__divsf3+0x18>
 42a:	21 f4       	brne	.+8      	; 0x434 <__divsf3+0x16>
 42c:	5f 3f       	cpi	r21, 0xFF	; 255
 42e:	19 f0       	breq	.+6      	; 0x436 <__divsf3+0x18>
 430:	b3 c0       	rjmp	.+358    	; 0x598 <__fp_inf>
 432:	51 11       	cpse	r21, r1
 434:	fc c0       	rjmp	.+504    	; 0x62e <__fp_szero>
 436:	b6 c0       	rjmp	.+364    	; 0x5a4 <__fp_nan>

00000438 <__divsf3x>:
 438:	d7 d0       	rcall	.+430    	; 0x5e8 <__fp_split3>
 43a:	98 f3       	brcs	.-26     	; 0x422 <__divsf3+0x4>

0000043c <__divsf3_pse>:
 43c:	99 23       	and	r25, r25
 43e:	c9 f3       	breq	.-14     	; 0x432 <__divsf3+0x14>
 440:	55 23       	and	r21, r21
 442:	b1 f3       	breq	.-20     	; 0x430 <__divsf3+0x12>
 444:	95 1b       	sub	r25, r21
 446:	55 0b       	sbc	r21, r21
 448:	bb 27       	eor	r27, r27
 44a:	aa 27       	eor	r26, r26
 44c:	62 17       	cp	r22, r18
 44e:	73 07       	cpc	r23, r19
 450:	84 07       	cpc	r24, r20
 452:	38 f0       	brcs	.+14     	; 0x462 <__divsf3_pse+0x26>
 454:	9f 5f       	subi	r25, 0xFF	; 255
 456:	5f 4f       	sbci	r21, 0xFF	; 255
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	44 1f       	adc	r20, r20
 45e:	aa 1f       	adc	r26, r26
 460:	a9 f3       	breq	.-22     	; 0x44c <__divsf3_pse+0x10>
 462:	33 d0       	rcall	.+102    	; 0x4ca <__divsf3_pse+0x8e>
 464:	0e 2e       	mov	r0, r30
 466:	3a f0       	brmi	.+14     	; 0x476 <__divsf3_pse+0x3a>
 468:	e0 e8       	ldi	r30, 0x80	; 128
 46a:	30 d0       	rcall	.+96     	; 0x4cc <__divsf3_pse+0x90>
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	50 40       	sbci	r21, 0x00	; 0
 470:	e6 95       	lsr	r30
 472:	00 1c       	adc	r0, r0
 474:	ca f7       	brpl	.-14     	; 0x468 <__divsf3_pse+0x2c>
 476:	29 d0       	rcall	.+82     	; 0x4ca <__divsf3_pse+0x8e>
 478:	fe 2f       	mov	r31, r30
 47a:	27 d0       	rcall	.+78     	; 0x4ca <__divsf3_pse+0x8e>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	bb 1f       	adc	r27, r27
 484:	26 17       	cp	r18, r22
 486:	37 07       	cpc	r19, r23
 488:	48 07       	cpc	r20, r24
 48a:	ab 07       	cpc	r26, r27
 48c:	b0 e8       	ldi	r27, 0x80	; 128
 48e:	09 f0       	breq	.+2      	; 0x492 <__divsf3_pse+0x56>
 490:	bb 0b       	sbc	r27, r27
 492:	80 2d       	mov	r24, r0
 494:	bf 01       	movw	r22, r30
 496:	ff 27       	eor	r31, r31
 498:	93 58       	subi	r25, 0x83	; 131
 49a:	5f 4f       	sbci	r21, 0xFF	; 255
 49c:	2a f0       	brmi	.+10     	; 0x4a8 <__divsf3_pse+0x6c>
 49e:	9e 3f       	cpi	r25, 0xFE	; 254
 4a0:	51 05       	cpc	r21, r1
 4a2:	68 f0       	brcs	.+26     	; 0x4be <__divsf3_pse+0x82>
 4a4:	79 c0       	rjmp	.+242    	; 0x598 <__fp_inf>
 4a6:	c3 c0       	rjmp	.+390    	; 0x62e <__fp_szero>
 4a8:	5f 3f       	cpi	r21, 0xFF	; 255
 4aa:	ec f3       	brlt	.-6      	; 0x4a6 <__divsf3_pse+0x6a>
 4ac:	98 3e       	cpi	r25, 0xE8	; 232
 4ae:	dc f3       	brlt	.-10     	; 0x4a6 <__divsf3_pse+0x6a>
 4b0:	86 95       	lsr	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b7 95       	ror	r27
 4b8:	f7 95       	ror	r31
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	c9 f7       	brne	.-14     	; 0x4b0 <__divsf3_pse+0x74>
 4be:	88 0f       	add	r24, r24
 4c0:	91 1d       	adc	r25, r1
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret
 4ca:	e1 e0       	ldi	r30, 0x01	; 1
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	bb 1f       	adc	r27, r27
 4d4:	62 17       	cp	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	ba 07       	cpc	r27, r26
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__divsf3_pse+0xaa>
 4de:	62 1b       	sub	r22, r18
 4e0:	73 0b       	sbc	r23, r19
 4e2:	84 0b       	sbc	r24, r20
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	ee 1f       	adc	r30, r30
 4e8:	88 f7       	brcc	.-30     	; 0x4cc <__divsf3_pse+0x90>
 4ea:	e0 95       	com	r30
 4ec:	08 95       	ret

000004ee <__fixsfsi>:
 4ee:	04 d0       	rcall	.+8      	; 0x4f8 <__fixunssfsi>
 4f0:	68 94       	set
 4f2:	b1 11       	cpse	r27, r1
 4f4:	9c c0       	rjmp	.+312    	; 0x62e <__fp_szero>
 4f6:	08 95       	ret

000004f8 <__fixunssfsi>:
 4f8:	7f d0       	rcall	.+254    	; 0x5f8 <__fp_splitA>
 4fa:	88 f0       	brcs	.+34     	; 0x51e <__fixunssfsi+0x26>
 4fc:	9f 57       	subi	r25, 0x7F	; 127
 4fe:	90 f0       	brcs	.+36     	; 0x524 <__fixunssfsi+0x2c>
 500:	b9 2f       	mov	r27, r25
 502:	99 27       	eor	r25, r25
 504:	b7 51       	subi	r27, 0x17	; 23
 506:	a0 f0       	brcs	.+40     	; 0x530 <__fixunssfsi+0x38>
 508:	d1 f0       	breq	.+52     	; 0x53e <__fixunssfsi+0x46>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	1a f0       	brmi	.+6      	; 0x51a <__fixunssfsi+0x22>
 514:	ba 95       	dec	r27
 516:	c9 f7       	brne	.-14     	; 0x50a <__fixunssfsi+0x12>
 518:	12 c0       	rjmp	.+36     	; 0x53e <__fixunssfsi+0x46>
 51a:	b1 30       	cpi	r27, 0x01	; 1
 51c:	81 f0       	breq	.+32     	; 0x53e <__fixunssfsi+0x46>
 51e:	86 d0       	rcall	.+268    	; 0x62c <__fp_zero>
 520:	b1 e0       	ldi	r27, 0x01	; 1
 522:	08 95       	ret
 524:	83 c0       	rjmp	.+262    	; 0x62c <__fp_zero>
 526:	67 2f       	mov	r22, r23
 528:	78 2f       	mov	r23, r24
 52a:	88 27       	eor	r24, r24
 52c:	b8 5f       	subi	r27, 0xF8	; 248
 52e:	39 f0       	breq	.+14     	; 0x53e <__fixunssfsi+0x46>
 530:	b9 3f       	cpi	r27, 0xF9	; 249
 532:	cc f3       	brlt	.-14     	; 0x526 <__fixunssfsi+0x2e>
 534:	86 95       	lsr	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b3 95       	inc	r27
 53c:	d9 f7       	brne	.-10     	; 0x534 <__fixunssfsi+0x3c>
 53e:	3e f4       	brtc	.+14     	; 0x54e <__fixunssfsi+0x56>
 540:	90 95       	com	r25
 542:	80 95       	com	r24
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__fp_cmp>:
 550:	99 0f       	add	r25, r25
 552:	00 08       	sbc	r0, r0
 554:	55 0f       	add	r21, r21
 556:	aa 0b       	sbc	r26, r26
 558:	e0 e8       	ldi	r30, 0x80	; 128
 55a:	fe ef       	ldi	r31, 0xFE	; 254
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	e8 07       	cpc	r30, r24
 562:	f9 07       	cpc	r31, r25
 564:	c0 f0       	brcs	.+48     	; 0x596 <__fp_cmp+0x46>
 566:	12 16       	cp	r1, r18
 568:	13 06       	cpc	r1, r19
 56a:	e4 07       	cpc	r30, r20
 56c:	f5 07       	cpc	r31, r21
 56e:	98 f0       	brcs	.+38     	; 0x596 <__fp_cmp+0x46>
 570:	62 1b       	sub	r22, r18
 572:	73 0b       	sbc	r23, r19
 574:	84 0b       	sbc	r24, r20
 576:	95 0b       	sbc	r25, r21
 578:	39 f4       	brne	.+14     	; 0x588 <__fp_cmp+0x38>
 57a:	0a 26       	eor	r0, r26
 57c:	61 f0       	breq	.+24     	; 0x596 <__fp_cmp+0x46>
 57e:	23 2b       	or	r18, r19
 580:	24 2b       	or	r18, r20
 582:	25 2b       	or	r18, r21
 584:	21 f4       	brne	.+8      	; 0x58e <__fp_cmp+0x3e>
 586:	08 95       	ret
 588:	0a 26       	eor	r0, r26
 58a:	09 f4       	brne	.+2      	; 0x58e <__fp_cmp+0x3e>
 58c:	a1 40       	sbci	r26, 0x01	; 1
 58e:	a6 95       	lsr	r26
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	81 1d       	adc	r24, r1
 594:	81 1d       	adc	r24, r1
 596:	08 95       	ret

00000598 <__fp_inf>:
 598:	97 f9       	bld	r25, 7
 59a:	9f 67       	ori	r25, 0x7F	; 127
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	08 95       	ret

000005a4 <__fp_nan>:
 5a4:	9f ef       	ldi	r25, 0xFF	; 255
 5a6:	80 ec       	ldi	r24, 0xC0	; 192
 5a8:	08 95       	ret

000005aa <__fp_pscA>:
 5aa:	00 24       	eor	r0, r0
 5ac:	0a 94       	dec	r0
 5ae:	16 16       	cp	r1, r22
 5b0:	17 06       	cpc	r1, r23
 5b2:	18 06       	cpc	r1, r24
 5b4:	09 06       	cpc	r0, r25
 5b6:	08 95       	ret

000005b8 <__fp_pscB>:
 5b8:	00 24       	eor	r0, r0
 5ba:	0a 94       	dec	r0
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	05 06       	cpc	r0, r21
 5c4:	08 95       	ret

000005c6 <__fp_round>:
 5c6:	09 2e       	mov	r0, r25
 5c8:	03 94       	inc	r0
 5ca:	00 0c       	add	r0, r0
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__fp_round+0xc>
 5ce:	88 23       	and	r24, r24
 5d0:	52 f0       	brmi	.+20     	; 0x5e6 <__fp_round+0x20>
 5d2:	bb 0f       	add	r27, r27
 5d4:	40 f4       	brcc	.+16     	; 0x5e6 <__fp_round+0x20>
 5d6:	bf 2b       	or	r27, r31
 5d8:	11 f4       	brne	.+4      	; 0x5de <__fp_round+0x18>
 5da:	60 ff       	sbrs	r22, 0
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__fp_round+0x20>
 5de:	6f 5f       	subi	r22, 0xFF	; 255
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	08 95       	ret

000005e8 <__fp_split3>:
 5e8:	57 fd       	sbrc	r21, 7
 5ea:	90 58       	subi	r25, 0x80	; 128
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	59 f0       	breq	.+22     	; 0x608 <__fp_splitA+0x10>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	71 f0       	breq	.+28     	; 0x612 <__fp_splitA+0x1a>
 5f6:	47 95       	ror	r20

000005f8 <__fp_splitA>:
 5f8:	88 0f       	add	r24, r24
 5fa:	97 fb       	bst	r25, 7
 5fc:	99 1f       	adc	r25, r25
 5fe:	61 f0       	breq	.+24     	; 0x618 <__fp_splitA+0x20>
 600:	9f 3f       	cpi	r25, 0xFF	; 255
 602:	79 f0       	breq	.+30     	; 0x622 <__fp_splitA+0x2a>
 604:	87 95       	ror	r24
 606:	08 95       	ret
 608:	12 16       	cp	r1, r18
 60a:	13 06       	cpc	r1, r19
 60c:	14 06       	cpc	r1, r20
 60e:	55 1f       	adc	r21, r21
 610:	f2 cf       	rjmp	.-28     	; 0x5f6 <__fp_split3+0xe>
 612:	46 95       	lsr	r20
 614:	f1 df       	rcall	.-30     	; 0x5f8 <__fp_splitA>
 616:	08 c0       	rjmp	.+16     	; 0x628 <__fp_splitA+0x30>
 618:	16 16       	cp	r1, r22
 61a:	17 06       	cpc	r1, r23
 61c:	18 06       	cpc	r1, r24
 61e:	99 1f       	adc	r25, r25
 620:	f1 cf       	rjmp	.-30     	; 0x604 <__fp_splitA+0xc>
 622:	86 95       	lsr	r24
 624:	71 05       	cpc	r23, r1
 626:	61 05       	cpc	r22, r1
 628:	08 94       	sec
 62a:	08 95       	ret

0000062c <__fp_zero>:
 62c:	e8 94       	clt

0000062e <__fp_szero>:
 62e:	bb 27       	eor	r27, r27
 630:	66 27       	eor	r22, r22
 632:	77 27       	eor	r23, r23
 634:	cb 01       	movw	r24, r22
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret

0000063a <__gesf2>:
 63a:	8a df       	rcall	.-236    	; 0x550 <__fp_cmp>
 63c:	08 f4       	brcc	.+2      	; 0x640 <__gesf2+0x6>
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	08 95       	ret

00000642 <__mulsf3>:
 642:	0b d0       	rcall	.+22     	; 0x65a <__mulsf3x>
 644:	c0 cf       	rjmp	.-128    	; 0x5c6 <__fp_round>
 646:	b1 df       	rcall	.-158    	; 0x5aa <__fp_pscA>
 648:	28 f0       	brcs	.+10     	; 0x654 <__mulsf3+0x12>
 64a:	b6 df       	rcall	.-148    	; 0x5b8 <__fp_pscB>
 64c:	18 f0       	brcs	.+6      	; 0x654 <__mulsf3+0x12>
 64e:	95 23       	and	r25, r21
 650:	09 f0       	breq	.+2      	; 0x654 <__mulsf3+0x12>
 652:	a2 cf       	rjmp	.-188    	; 0x598 <__fp_inf>
 654:	a7 cf       	rjmp	.-178    	; 0x5a4 <__fp_nan>
 656:	11 24       	eor	r1, r1
 658:	ea cf       	rjmp	.-44     	; 0x62e <__fp_szero>

0000065a <__mulsf3x>:
 65a:	c6 df       	rcall	.-116    	; 0x5e8 <__fp_split3>
 65c:	a0 f3       	brcs	.-24     	; 0x646 <__mulsf3+0x4>

0000065e <__mulsf3_pse>:
 65e:	95 9f       	mul	r25, r21
 660:	d1 f3       	breq	.-12     	; 0x656 <__mulsf3+0x14>
 662:	95 0f       	add	r25, r21
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	55 1f       	adc	r21, r21
 668:	62 9f       	mul	r22, r18
 66a:	f0 01       	movw	r30, r0
 66c:	72 9f       	mul	r23, r18
 66e:	bb 27       	eor	r27, r27
 670:	f0 0d       	add	r31, r0
 672:	b1 1d       	adc	r27, r1
 674:	63 9f       	mul	r22, r19
 676:	aa 27       	eor	r26, r26
 678:	f0 0d       	add	r31, r0
 67a:	b1 1d       	adc	r27, r1
 67c:	aa 1f       	adc	r26, r26
 67e:	64 9f       	mul	r22, r20
 680:	66 27       	eor	r22, r22
 682:	b0 0d       	add	r27, r0
 684:	a1 1d       	adc	r26, r1
 686:	66 1f       	adc	r22, r22
 688:	82 9f       	mul	r24, r18
 68a:	22 27       	eor	r18, r18
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	62 1f       	adc	r22, r18
 692:	73 9f       	mul	r23, r19
 694:	b0 0d       	add	r27, r0
 696:	a1 1d       	adc	r26, r1
 698:	62 1f       	adc	r22, r18
 69a:	83 9f       	mul	r24, r19
 69c:	a0 0d       	add	r26, r0
 69e:	61 1d       	adc	r22, r1
 6a0:	22 1f       	adc	r18, r18
 6a2:	74 9f       	mul	r23, r20
 6a4:	33 27       	eor	r19, r19
 6a6:	a0 0d       	add	r26, r0
 6a8:	61 1d       	adc	r22, r1
 6aa:	23 1f       	adc	r18, r19
 6ac:	84 9f       	mul	r24, r20
 6ae:	60 0d       	add	r22, r0
 6b0:	21 1d       	adc	r18, r1
 6b2:	82 2f       	mov	r24, r18
 6b4:	76 2f       	mov	r23, r22
 6b6:	6a 2f       	mov	r22, r26
 6b8:	11 24       	eor	r1, r1
 6ba:	9f 57       	subi	r25, 0x7F	; 127
 6bc:	50 40       	sbci	r21, 0x00	; 0
 6be:	8a f0       	brmi	.+34     	; 0x6e2 <__mulsf3_pse+0x84>
 6c0:	e1 f0       	breq	.+56     	; 0x6fa <__mulsf3_pse+0x9c>
 6c2:	88 23       	and	r24, r24
 6c4:	4a f0       	brmi	.+18     	; 0x6d8 <__mulsf3_pse+0x7a>
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	bb 1f       	adc	r27, r27
 6cc:	66 1f       	adc	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	91 50       	subi	r25, 0x01	; 1
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	a9 f7       	brne	.-22     	; 0x6c2 <__mulsf3_pse+0x64>
 6d8:	9e 3f       	cpi	r25, 0xFE	; 254
 6da:	51 05       	cpc	r21, r1
 6dc:	70 f0       	brcs	.+28     	; 0x6fa <__mulsf3_pse+0x9c>
 6de:	5c cf       	rjmp	.-328    	; 0x598 <__fp_inf>
 6e0:	a6 cf       	rjmp	.-180    	; 0x62e <__fp_szero>
 6e2:	5f 3f       	cpi	r21, 0xFF	; 255
 6e4:	ec f3       	brlt	.-6      	; 0x6e0 <__mulsf3_pse+0x82>
 6e6:	98 3e       	cpi	r25, 0xE8	; 232
 6e8:	dc f3       	brlt	.-10     	; 0x6e0 <__mulsf3_pse+0x82>
 6ea:	86 95       	lsr	r24
 6ec:	77 95       	ror	r23
 6ee:	67 95       	ror	r22
 6f0:	b7 95       	ror	r27
 6f2:	f7 95       	ror	r31
 6f4:	e7 95       	ror	r30
 6f6:	9f 5f       	subi	r25, 0xFF	; 255
 6f8:	c1 f7       	brne	.-16     	; 0x6ea <__mulsf3_pse+0x8c>
 6fa:	fe 2b       	or	r31, r30
 6fc:	88 0f       	add	r24, r24
 6fe:	91 1d       	adc	r25, r1
 700:	96 95       	lsr	r25
 702:	87 95       	ror	r24
 704:	97 f9       	bld	r25, 7
 706:	08 95       	ret

00000708 <_exit>:
 708:	f8 94       	cli

0000070a <__stop_program>:
 70a:	ff cf       	rjmp	.-2      	; 0x70a <__stop_program>
