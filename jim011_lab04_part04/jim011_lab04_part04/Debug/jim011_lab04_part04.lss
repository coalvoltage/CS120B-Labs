
jim011_lab04_part04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089a  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a8  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000286  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	52 c0       	rjmp	.+164    	; 0xaa <__bad_interrupt>
   6:	00 00       	nop
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	00 00       	nop
   c:	4e c0       	rjmp	.+156    	; 0xaa <__bad_interrupt>
   e:	00 00       	nop
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	00 00       	nop
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	00 00       	nop
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
  1e:	00 00       	nop
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
  22:	00 00       	nop
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	00 00       	nop
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3e c0       	rjmp	.+124    	; 0xaa <__bad_interrupt>
  2e:	00 00       	nop
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	00 00       	nop
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	36 c0       	rjmp	.+108    	; 0xaa <__bad_interrupt>
  3e:	00 00       	nop
  40:	34 c0       	rjmp	.+104    	; 0xaa <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c0       	rjmp	.+100    	; 0xaa <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c0       	rjmp	.+96     	; 0xaa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c0       	rjmp	.+92     	; 0xaa <__bad_interrupt>
  4e:	00 00       	nop
  50:	2c c0       	rjmp	.+88     	; 0xaa <__bad_interrupt>
  52:	00 00       	nop
  54:	2a c0       	rjmp	.+84     	; 0xaa <__bad_interrupt>
  56:	00 00       	nop
  58:	28 c0       	rjmp	.+80     	; 0xaa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c0       	rjmp	.+76     	; 0xaa <__bad_interrupt>
  5e:	00 00       	nop
  60:	24 c0       	rjmp	.+72     	; 0xaa <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c0       	rjmp	.+68     	; 0xaa <__bad_interrupt>
  66:	00 00       	nop
  68:	20 c0       	rjmp	.+64     	; 0xaa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1e c0       	rjmp	.+60     	; 0xaa <__bad_interrupt>
  6e:	00 00       	nop
  70:	1c c0       	rjmp	.+56     	; 0xaa <__bad_interrupt>
  72:	00 00       	nop
  74:	1a c0       	rjmp	.+52     	; 0xaa <__bad_interrupt>
  76:	00 00       	nop
  78:	18 c0       	rjmp	.+48     	; 0xaa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	16 c0       	rjmp	.+44     	; 0xaa <__bad_interrupt>
  7e:	00 00       	nop
  80:	14 c0       	rjmp	.+40     	; 0xaa <__bad_interrupt>
  82:	00 00       	nop
  84:	12 c0       	rjmp	.+36     	; 0xaa <__bad_interrupt>
  86:	00 00       	nop
  88:	10 c0       	rjmp	.+32     	; 0xaa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c6 00       	.word	0x00c6	; ????
  8e:	6c 00       	.word	0x006c	; ????
  90:	73 00       	.word	0x0073	; ????
  92:	7a 00       	.word	0x007a	; ????
  94:	87 00       	.word	0x0087	; ????
  96:	91 00       	.word	0x0091	; ????
  98:	97 00       	.word	0x0097	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	02 d0       	rcall	.+4      	; 0xac <main>
  a8:	92 c0       	rjmp	.+292    	; 0x1ce <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00;
  ac:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;
  b2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  b4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
  b6:	18 b8       	out	0x08, r1	; 8
	DDRC = 0xFF;
  b8:	87 b9       	out	0x07, r24	; 7
	char unsigned stateOutput = 0;
	enum state{n0,n1,n2,n3,n4,n5,n6} state;
		state = 0;
    while (1) 
    {
		input = PINA & 0x07;
  ba:	80 b1       	in	r24, 0x00	; 0
		inside = PINA & 0x80;
  bc:	80 b1       	in	r24, 0x00	; 0
		inside = inside >> 7;
		switch(state){
			case n0:
				state = n1;
  be:	51 e0       	ldi	r21, 0x01	; 1
				stateOutput = 0;
  c0:	40 e0       	ldi	r20, 0x00	; 0
				output = 0;
  c2:	60 e0       	ldi	r22, 0x00	; 0
				else if(input != 0 && inside == 0) {
					state = n4;
				}
				break;
			default:
				state = n0;
  c4:	70 e0       	ldi	r23, 0x00	; 0
		input = PINA & 0x07;
		inside = PINA & 0x80;
		inside = inside >> 7;
		switch(state){
			case n0:
				state = n1;
  c6:	c1 e0       	ldi	r28, 0x01	; 1
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n6:
				stateOutput = 3;
  c8:	d3 e0       	ldi	r29, 0x03	; 3
				if(input == 2 && inside == 0) {
					state = n4;
					output = 0;
				}
				else if(input != 0 && inside == 0) {
					state = n4;
  ca:	14 e0       	ldi	r17, 0x04	; 4
				if(input == 0 && inside == 1) {
					state = n1;
					output = 0;
				}
				else if(input == 0 && inside == 0) {
					state = n5;
  cc:	0f 2e       	mov	r0, r31
  ce:	f5 e0       	ldi	r31, 0x05	; 5
  d0:	ff 2e       	mov	r15, r31
  d2:	f0 2d       	mov	r31, r0
				if (input == 4 && inside == 0){
					state = n2;
				}
				break;
			case n2:
			stateOutput = 2;
  d4:	02 e0       	ldi	r16, 0x02	; 2
  d6:	5d c0       	rjmp	.+186    	; 0x192 <main+0xe6>
				stateOutput = 0;
				output = 0;
				break;
			case n1:
				stateOutput = 1;
				if (input == 4 && inside == 0){
  d8:	24 30       	cpi	r18, 0x04	; 4
  da:	b1 f5       	brne	.+108    	; 0x148 <main+0x9c>
  dc:	31 11       	cpse	r19, r1
  de:	36 c0       	rjmp	.+108    	; 0x14c <main+0xa0>
					state = n2;
  e0:	50 2f       	mov	r21, r16
				state = n1;
				stateOutput = 0;
				output = 0;
				break;
			case n1:
				stateOutput = 1;
  e2:	4c 2f       	mov	r20, r28
  e4:	56 c0       	rjmp	.+172    	; 0x192 <main+0xe6>
					state = n2;
				}
				break;
			case n2:
			stateOutput = 2;
				if(input == 0 && inside == 0) {
  e6:	21 11       	cpse	r18, r1
  e8:	33 c0       	rjmp	.+102    	; 0x150 <main+0xa4>
  ea:	31 11       	cpse	r19, r1
  ec:	33 c0       	rjmp	.+102    	; 0x154 <main+0xa8>
					state = n3;
  ee:	5d 2f       	mov	r21, r29
				if (input == 4 && inside == 0){
					state = n2;
				}
				break;
			case n2:
			stateOutput = 2;
  f0:	40 2f       	mov	r20, r16
  f2:	4f c0       	rjmp	.+158    	; 0x192 <main+0xe6>
					state = n3;
				}
				break;
			case n3:
				stateOutput = 3;
				if(input == 2 && inside == 0) {
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	21 f4       	brne	.+8      	; 0x100 <main+0x54>
  f8:	33 23       	and	r19, r19
  fa:	71 f1       	breq	.+92     	; 0x158 <main+0xac>
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n3:
				stateOutput = 3;
  fc:	4d 2f       	mov	r20, r29
  fe:	49 c0       	rjmp	.+146    	; 0x192 <main+0xe6>
				if(input == 2 && inside == 0) {
					state = n4;
					output = 1;
				}
				else if(input != 0 && inside == 0) {
 100:	22 23       	and	r18, r18
 102:	71 f1       	breq	.+92     	; 0x160 <main+0xb4>
 104:	31 11       	cpse	r19, r1
 106:	2e c0       	rjmp	.+92     	; 0x164 <main+0xb8>
					state = n1;
 108:	5c 2f       	mov	r21, r28
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n3:
				stateOutput = 3;
 10a:	4d 2f       	mov	r20, r29
 10c:	42 c0       	rjmp	.+132    	; 0x192 <main+0xe6>
				}
				break;
			case n4:
				stateOutput = 4;
				output = 1;
				if(input == 0 && inside == 1) {
 10e:	21 11       	cpse	r18, r1
 110:	2b c0       	rjmp	.+86     	; 0x168 <main+0xbc>
 112:	31 30       	cpi	r19, 0x01	; 1
 114:	61 f1       	breq	.+88     	; 0x16e <main+0xc2>
					state = n1;
					output = 0;
				}
				else if(input == 0 && inside == 0) {
 116:	31 11       	cpse	r19, r1
 118:	2e c0       	rjmp	.+92     	; 0x176 <main+0xca>
					state = n5;
 11a:	5f 2d       	mov	r21, r15
				else if(input != 0 && inside == 0) {
					state = n1;
				}
				break;
			case n4:
				stateOutput = 4;
 11c:	41 2f       	mov	r20, r17
				output = 1;
 11e:	6c 2f       	mov	r22, r28
 120:	38 c0       	rjmp	.+112    	; 0x192 <main+0xe6>
				else if(input == 0 && inside == 0) {
					state = n5;
				}
				break;
			case n5:
				if(input == 0 && inside == 0) {
 122:	21 11       	cpse	r18, r1
 124:	36 c0       	rjmp	.+108    	; 0x192 <main+0xe6>
 126:	31 11       	cpse	r19, r1
 128:	34 c0       	rjmp	.+104    	; 0x192 <main+0xe6>
					state = n3;
 12a:	5d 2f       	mov	r21, r29
 12c:	32 c0       	rjmp	.+100    	; 0x192 <main+0xe6>
				}
				break;
			case n6:
				stateOutput = 3;
				if(input == 2 && inside == 0) {
 12e:	22 30       	cpi	r18, 0x02	; 2
 130:	21 f4       	brne	.+8      	; 0x13a <main+0x8e>
 132:	33 23       	and	r19, r19
 134:	19 f1       	breq	.+70     	; 0x17c <main+0xd0>
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n6:
				stateOutput = 3;
 136:	4d 2f       	mov	r20, r29
 138:	2c c0       	rjmp	.+88     	; 0x192 <main+0xe6>
				if(input == 2 && inside == 0) {
					state = n4;
					output = 0;
				}
				else if(input != 0 && inside == 0) {
 13a:	22 23       	and	r18, r18
 13c:	19 f1       	breq	.+70     	; 0x184 <main+0xd8>
 13e:	31 11       	cpse	r19, r1
 140:	23 c0       	rjmp	.+70     	; 0x188 <main+0xdc>
					state = n4;
 142:	51 2f       	mov	r21, r17
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n6:
				stateOutput = 3;
 144:	4d 2f       	mov	r20, r29
 146:	25 c0       	rjmp	.+74     	; 0x192 <main+0xe6>
				state = n1;
				stateOutput = 0;
				output = 0;
				break;
			case n1:
				stateOutput = 1;
 148:	4c 2f       	mov	r20, r28
 14a:	23 c0       	rjmp	.+70     	; 0x192 <main+0xe6>
 14c:	4c 2f       	mov	r20, r28
 14e:	21 c0       	rjmp	.+66     	; 0x192 <main+0xe6>
				if (input == 4 && inside == 0){
					state = n2;
				}
				break;
			case n2:
			stateOutput = 2;
 150:	40 2f       	mov	r20, r16
 152:	1f c0       	rjmp	.+62     	; 0x192 <main+0xe6>
 154:	40 2f       	mov	r20, r16
 156:	1d c0       	rjmp	.+58     	; 0x192 <main+0xe6>
				}
				break;
			case n3:
				stateOutput = 3;
				if(input == 2 && inside == 0) {
					state = n4;
 158:	51 2f       	mov	r21, r17
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n3:
				stateOutput = 3;
 15a:	4d 2f       	mov	r20, r29
				if(input == 2 && inside == 0) {
					state = n4;
					output = 1;
 15c:	6c 2f       	mov	r22, r28
 15e:	19 c0       	rjmp	.+50     	; 0x192 <main+0xe6>
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n3:
				stateOutput = 3;
 160:	4d 2f       	mov	r20, r29
 162:	17 c0       	rjmp	.+46     	; 0x192 <main+0xe6>
 164:	4d 2f       	mov	r20, r29
 166:	15 c0       	rjmp	.+42     	; 0x192 <main+0xe6>
				else if(input != 0 && inside == 0) {
					state = n1;
				}
				break;
			case n4:
				stateOutput = 4;
 168:	41 2f       	mov	r20, r17
				output = 1;
 16a:	6c 2f       	mov	r22, r28
 16c:	12 c0       	rjmp	.+36     	; 0x192 <main+0xe6>
				if(input == 0 && inside == 1) {
					state = n1;
 16e:	5c 2f       	mov	r21, r28
				else if(input != 0 && inside == 0) {
					state = n1;
				}
				break;
			case n4:
				stateOutput = 4;
 170:	41 2f       	mov	r20, r17
				output = 1;
				if(input == 0 && inside == 1) {
					state = n1;
					output = 0;
 172:	67 2f       	mov	r22, r23
 174:	0e c0       	rjmp	.+28     	; 0x192 <main+0xe6>
				else if(input != 0 && inside == 0) {
					state = n1;
				}
				break;
			case n4:
				stateOutput = 4;
 176:	41 2f       	mov	r20, r17
				output = 1;
 178:	6c 2f       	mov	r22, r28
 17a:	0b c0       	rjmp	.+22     	; 0x192 <main+0xe6>
				}
				break;
			case n6:
				stateOutput = 3;
				if(input == 2 && inside == 0) {
					state = n4;
 17c:	51 2f       	mov	r21, r17
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n6:
				stateOutput = 3;
 17e:	4d 2f       	mov	r20, r29
				if(input == 2 && inside == 0) {
					state = n4;
					output = 0;
 180:	67 2f       	mov	r22, r23
 182:	07 c0       	rjmp	.+14     	; 0x192 <main+0xe6>
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
			case n6:
				stateOutput = 3;
 184:	4d 2f       	mov	r20, r29
 186:	05 c0       	rjmp	.+10     	; 0x192 <main+0xe6>
 188:	4d 2f       	mov	r20, r29
 18a:	03 c0       	rjmp	.+6      	; 0x192 <main+0xe6>
		input = PINA & 0x07;
		inside = PINA & 0x80;
		inside = inside >> 7;
		switch(state){
			case n0:
				state = n1;
 18c:	5c 2f       	mov	r21, r28
				stateOutput = 0;
 18e:	47 2f       	mov	r20, r23
				output = 0;
 190:	67 2f       	mov	r22, r23
				break;
			default:
				state = n0;
				break;
		}
		PORTB = output;
 192:	65 b9       	out	0x05, r22	; 5
		PORTC = stateOutput;
 194:	48 b9       	out	0x08, r20	; 8
	char unsigned stateOutput = 0;
	enum state{n0,n1,n2,n3,n4,n5,n6} state;
		state = 0;
    while (1) 
    {
		input = PINA & 0x07;
 196:	80 b1       	in	r24, 0x00	; 0
 198:	28 2f       	mov	r18, r24
 19a:	27 70       	andi	r18, 0x07	; 7
		inside = PINA & 0x80;
 19c:	80 b1       	in	r24, 0x00	; 0
		inside = inside >> 7;
 19e:	38 2f       	mov	r19, r24
 1a0:	33 1f       	adc	r19, r19
 1a2:	33 27       	eor	r19, r19
 1a4:	33 1f       	adc	r19, r19
		switch(state){
 1a6:	85 2f       	mov	r24, r21
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	87 30       	cpi	r24, 0x07	; 7
 1ac:	91 05       	cpc	r25, r1
 1ae:	20 f4       	brcc	.+8      	; 0x1b8 <main+0x10c>
 1b0:	fc 01       	movw	r30, r24
 1b2:	ea 5b       	subi	r30, 0xBA	; 186
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__tablejump2__>
				else if(input != 0 && inside == 0) {
					state = n4;
				}
				break;
			default:
				state = n0;
 1b8:	57 2f       	mov	r21, r23
 1ba:	eb cf       	rjmp	.-42     	; 0x192 <main+0xe6>

000001bc <__tablejump2__>:
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	00 24       	eor	r0, r0
 1c2:	00 1c       	adc	r0, r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	07 90       	elpm	r0, Z+
 1c8:	f6 91       	elpm	r31, Z
 1ca:	e0 2d       	mov	r30, r0
 1cc:	09 94       	ijmp

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
