
jim011_lab10_part02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800108  00800108  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1c  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e2  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ce d0       	rcall	.+412    	; 0x260 <main>
  c4:	34 c1       	rjmp	.+616    	; 0x32e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
  fc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 100:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 104:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_cntcurr>
 126:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x1>
 12a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x2>
 12e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
 13c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 140:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 144:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr>
 16a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x1>
 16e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <_avr_timer_cntcurr+0x2>
 172:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <_avr_timer_cntcurr>
 19c:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <_avr_timer_cntcurr+0x1>
 1a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_avr_timer_cntcurr+0x2>
 1a4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <ThreeLED>:

void ThreeLED(){
	//STATIC VARS
	unsigned static char currentPattern;
	//LOGIC
	switch(state3LED) {
 1aa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state3LED>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <ThreeLED+0x1c>
 1b2:	18 f0       	brcs	.+6      	; 0x1ba <ThreeLED+0x10>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <ThreeLED+0x2a>
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <ThreeLED+0x24>
		case start3:
		state3LED = init3;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state3LED>
		break;
	}
	//OUTPUT
	switch(state3LED) {
		case init3:
		currentPattern = 0;
 1c0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		break;
 1c4:	08 95       	ret
	switch(state3LED) {
		case start3:
		state3LED = init3;
		break;
		case init3:
		state3LED = on3;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state3LED>
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <ThreeLED+0x2a>
		else {
			currentPattern++;
		}
		break;
		default:
		state3LED = start3;
 1ce:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state3LED>
 1d2:	08 95       	ret
	switch(state3LED) {
		case init3:
		currentPattern = 0;
		break;
		case on3:
		threeLEDs = threeLEDPatterns[currentPattern];
 1d4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1d8:	e8 2f       	mov	r30, r24
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ec 5f       	subi	r30, 0xFC	; 252
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	90 81       	ld	r25, Z
 1e2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <threeLEDs>
		if(currentPattern >=2) {
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <ThreeLED+0x46>
			currentPattern = 0;
 1ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 1ee:	08 95       	ret
		}
		else {
			currentPattern++;
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1f6:	08 95       	ret

000001f8 <BlinkingLED>:
		state3LED = start3;
	}
}
void BlinkingLED(){
	//LOGIC
	switch(statebLED) {
 1f8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <statebLED>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	41 f0       	breq	.+16     	; 0x210 <BlinkingLED+0x18>
 200:	18 f0       	brcs	.+6      	; 0x208 <BlinkingLED+0x10>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	59 f0       	breq	.+22     	; 0x21c <BlinkingLED+0x24>
 206:	0e c0       	rjmp	.+28     	; 0x224 <BlinkingLED+0x2c>
		case startB:
		statebLED = onB;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <statebLED>
		break;
 20e:	0d c0       	rjmp	.+26     	; 0x22a <BlinkingLED+0x32>
		case onB:
		statebLED = offB;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <statebLED>
		case onB:
		blinkingLEDs = BLINKINGLEDPIN;
		break;
		
		case offB:
		blinkingLEDs = 0x00;
 216:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <blinkingLEDs>
		break;
 21a:	08 95       	ret
		break;
		case onB:
		statebLED = offB;
		break;
		case offB:
		statebLED = onB;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <statebLED>
		break;
 222:	03 c0       	rjmp	.+6      	; 0x22a <BlinkingLED+0x32>
		default:
		statebLED = startB;
 224:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <statebLED>
		break;
		
		default:
		break;
	}
}
 228:	08 95       	ret
		break;
	}
	//OUTPUT
	switch(statebLED) {
		case onB:
		blinkingLEDs = BLINKINGLEDPIN;
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blinkingLEDs>
 230:	08 95       	ret

00000232 <CombineLED>:
		break;
	}
}
void CombineLED(){
	//OUTPUT
	switch(stateOutput) {
 232:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <stateOutput>
 236:	88 23       	and	r24, r24
 238:	19 f0       	breq	.+6      	; 0x240 <CombineLED+0xe>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	41 f0       	breq	.+16     	; 0x24e <CombineLED+0x1c>
 23e:	04 c0       	rjmp	.+8      	; 0x248 <CombineLED+0x16>
		case start:
		stateOutput = output;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <stateOutput>
 246:	03 c0       	rjmp	.+6      	; 0x24e <CombineLED+0x1c>
		break;
		case output:
		break;
		default:
		stateOutput = start;
 248:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stateOutput>
 24c:	08 95       	ret
		break;
	}
	switch(stateOutput) {
		case output:
		outputLEDs = threeLEDs | blinkingLEDs;
 24e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threeLEDs>
 252:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <blinkingLEDs>
 256:	89 2b       	or	r24, r25
 258:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <outputLEDs>
		PORTB = outputLEDs;
 25c:	85 b9       	out	0x05, r24	; 5
 25e:	08 95       	ret

00000260 <main>:
unsigned char outputLEDs = 0x00;


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 260:	11 b8       	out	0x01, r1	; 1
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 266:	84 b9       	out	0x04, r24	; 4
 268:	15 b8       	out	0x05, r1	; 5
	TimerSet(PERIOD);
 26a:	64 e6       	ldi	r22, 0x64	; 100
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	8a df       	rcall	.-236    	; 0x188 <TimerSet>
	TimerOn();
 274:	29 df       	rcall	.-430    	; 0xc8 <TimerOn>
 276:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <blinkingLEDsElapsedTime>
	
	while (1)
	{
		if(blinkingLEDsElapsedTime >= blinkingLEDsPERIOD) {
 27a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <blinkingLEDsElapsedTime+0x1>
 27e:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <blinkingLEDsElapsedTime+0x2>
 282:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <blinkingLEDsElapsedTime+0x3>
 286:	88 3e       	cpi	r24, 0xE8	; 232
 288:	93 40       	sbci	r25, 0x03	; 3
 28a:	a1 05       	cpc	r26, r1
 28c:	b1 05       	cpc	r27, r1
 28e:	48 f0       	brcs	.+18     	; 0x2a2 <main+0x42>
			BlinkingLED();
 290:	b3 df       	rcall	.-154    	; 0x1f8 <BlinkingLED>
 292:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <blinkingLEDsElapsedTime>
			blinkingLEDsElapsedTime = 0;
 296:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <blinkingLEDsElapsedTime+0x1>
 29a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <blinkingLEDsElapsedTime+0x2>
 29e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <blinkingLEDsElapsedTime+0x3>
 2a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threeLEDsElapsedTime>
		}
		if(threeLEDsElapsedTime >= threeLEDsPERIOD) {
 2a6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <threeLEDsElapsedTime+0x1>
 2aa:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <threeLEDsElapsedTime+0x2>
 2ae:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <threeLEDsElapsedTime+0x3>
 2b2:	8c 32       	cpi	r24, 0x2C	; 44
 2b4:	91 40       	sbci	r25, 0x01	; 1
 2b6:	a1 05       	cpc	r26, r1
 2b8:	b1 05       	cpc	r27, r1
 2ba:	48 f0       	brcs	.+18     	; 0x2ce <main+0x6e>
			ThreeLED();
 2bc:	76 df       	rcall	.-276    	; 0x1aa <ThreeLED>
 2be:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <threeLEDsElapsedTime>
			threeLEDsElapsedTime = 0;
 2c2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <threeLEDsElapsedTime+0x1>
 2c6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <threeLEDsElapsedTime+0x2>
 2ca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <threeLEDsElapsedTime+0x3>
		}
		CombineLED();
 2ce:	b1 df       	rcall	.-158    	; 0x232 <CombineLED>
 2d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TimerFlag>
		while(!TimerFlag){}
 2d4:	88 23       	and	r24, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <main+0x70>
 2d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <TimerFlag>
		TimerFlag = 0;
 2dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threeLEDsElapsedTime>
		threeLEDsElapsedTime += PERIOD;
 2e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <threeLEDsElapsedTime+0x1>
 2e4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <threeLEDsElapsedTime+0x2>
 2e8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <threeLEDsElapsedTime+0x3>
 2ec:	8c 59       	subi	r24, 0x9C	; 156
 2ee:	9f 4f       	sbci	r25, 0xFF	; 255
 2f0:	af 4f       	sbci	r26, 0xFF	; 255
 2f2:	bf 4f       	sbci	r27, 0xFF	; 255
 2f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLEDsElapsedTime>
 2f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <threeLEDsElapsedTime+0x1>
 2fc:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <threeLEDsElapsedTime+0x2>
 300:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <threeLEDsElapsedTime+0x3>
 304:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <blinkingLEDsElapsedTime>
		blinkingLEDsElapsedTime += PERIOD;
 308:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <blinkingLEDsElapsedTime+0x1>
 30c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <blinkingLEDsElapsedTime+0x2>
 310:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <blinkingLEDsElapsedTime+0x3>
 314:	8c 59       	subi	r24, 0x9C	; 156
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	af 4f       	sbci	r26, 0xFF	; 255
 31a:	bf 4f       	sbci	r27, 0xFF	; 255
 31c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <blinkingLEDsElapsedTime>
 320:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <blinkingLEDsElapsedTime+0x1>
 324:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <blinkingLEDsElapsedTime+0x2>
 328:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <blinkingLEDsElapsedTime+0x3>
 32c:	a4 cf       	rjmp	.-184    	; 0x276 <main+0x16>

0000032e <_exit>:
	}
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
