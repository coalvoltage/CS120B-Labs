
lab06_part02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800108  00800108  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a39  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__vector_13>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ef 00       	.word	0x00ef	; ????
  8e:	f3 00       	.word	0x00f3	; ????
  90:	f7 00       	.word	0x00f7	; ????
  92:	1b 01       	movw	r2, r22
  94:	07 01       	movw	r0, r14
  96:	0e 01       	movw	r0, r28
  98:	14 01       	movw	r2, r8

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e6 e3       	ldi	r30, 0x36	; 54
  ae:	f3 e0       	ldi	r31, 0x03	; 3
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a8 30       	cpi	r26, 0x08	; 8
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a8 e0       	ldi	r26, 0x08	; 8
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 31       	cpi	r26, 0x13	; 19
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	14 d1       	rcall	.+552    	; 0x2fa <main>
  d2:	2f c1       	rjmp	.+606    	; 0x332 <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  dc:	8d e7       	ldi	r24, 0x7D	; 125
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_avr_timer_M>
  fa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_avr_timer_M+0x1>
  fe:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <_avr_timer_M+0x2>
 102:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <_avr_timer_M+0x3>
 106:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 10a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 10e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 112:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 116:	8f b7       	in	r24, 0x3f	; 63
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8f bf       	out	0x3f, r24	; 63
 11c:	08 95       	ret

0000011e <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 130:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 134:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 138:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 13c:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	a1 09       	sbc	r26, r1
 144:	b1 09       	sbc	r27, r1
 146:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 14a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 14e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 152:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 156:	89 2b       	or	r24, r25
 158:	8a 2b       	or	r24, r26
 15a:	8b 2b       	or	r24, r27
 15c:	99 f4       	brne	.+38     	; 0x184 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 164:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_avr_timer_M>
 168:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_avr_timer_M+0x1>
 16c:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <_avr_timer_M+0x2>
 170:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <_avr_timer_M+0x3>
 174:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 178:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 17c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 180:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	}
}
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 196:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <_avr_timer_M>
 19a:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <_avr_timer_M+0x1>
 19e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_M+0x2>
 1a2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 1a6:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <_avr_timer_cntcurr>
 1aa:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <_avr_timer_cntcurr+0x1>
 1ae:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr+0x2>
 1b2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x3>
 1b6:	08 95       	ret

000001b8 <Tick>:
	}
}

void Tick() {
	//Input
	tempA = ~PINA & 0x01;
 1b8:	80 b1       	in	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	38 2f       	mov	r19, r24
 1be:	31 70       	andi	r19, 0x01	; 1
 1c0:	80 fd       	sbrc	r24, 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tempA>
	//Transition
	switch(state) {
 1c8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <state>
 1cc:	82 2f       	mov	r24, r18
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	87 30       	cpi	r24, 0x07	; 7
 1d2:	91 05       	cpc	r25, r1
 1d4:	a0 f5       	brcc	.+104    	; 0x23e <Tick+0x86>
 1d6:	fc 01       	movw	r30, r24
 1d8:	ea 5b       	subi	r30, 0xBA	; 186
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	a1 c0       	rjmp	.+322    	; 0x320 <__tablejump2__>
		case start:
		state = init;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 1e4:	3c c0       	rjmp	.+120    	; 0x25e <Tick+0xa6>
		break;
		
		case init:
		state = flicker;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		break;
 1ec:	3f c0       	rjmp	.+126    	; 0x26c <Tick+0xb4>
		
		case flicker:
		if(count >= MSEC3) {
 1ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1f6:	03 97       	sbiw	r24, 0x03	; 3
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <Tick+0x44>
 1fa:	7b c0       	rjmp	.+246    	; 0x2f2 <Tick+0x13a>
			state = nextPattern;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		}
		if (tempA == 0x01){
 202:	31 11       	cpse	r19, r1
 204:	45 c0       	rjmp	.+138    	; 0x290 <Tick+0xd8>
			state = gameoverPress;
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 20c:	50 c0       	rjmp	.+160    	; 0x2ae <Tick+0xf6>
		}
		break;
		
		case gameoverPress:
			if (tempA == 0x00){
 20e:	33 23       	and	r19, r19
 210:	09 f4       	brne	.+2      	; 0x214 <Tick+0x5c>
 212:	4d c0       	rjmp	.+154    	; 0x2ae <Tick+0xf6>
				state = gameover;
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 21a:	56 c0       	rjmp	.+172    	; 0x2c8 <Tick+0x110>
			}
			break;
			
		case gameover:
			if (tempA == 0x01){
 21c:	31 11       	cpse	r19, r1
 21e:	54 c0       	rjmp	.+168    	; 0x2c8 <Tick+0x110>
			state = resetPress;
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 226:	59 c0       	rjmp	.+178    	; 0x2da <Tick+0x122>
			}
			break;
			
		case resetPress:
			if (tempA == 0x00){
 228:	33 23       	and	r19, r19
 22a:	09 f4       	brne	.+2      	; 0x22e <Tick+0x76>
 22c:	56 c0       	rjmp	.+172    	; 0x2da <Tick+0x122>
				state = flicker;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 234:	1b c0       	rjmp	.+54     	; 0x26c <Tick+0xb4>
			}
			break;
		
		case nextPattern:
		state = flicker;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
		break;
 23c:	17 c0       	rjmp	.+46     	; 0x26c <Tick+0xb4>
		
		default:
		break;
	}
	//Action
	switch(state) {
 23e:	23 30       	cpi	r18, 0x03	; 3
 240:	39 f1       	breq	.+78     	; 0x290 <Tick+0xd8>
 242:	30 f4       	brcc	.+12     	; 0x250 <Tick+0x98>
 244:	21 30       	cpi	r18, 0x01	; 1
 246:	59 f0       	breq	.+22     	; 0x25e <Tick+0xa6>
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	09 f0       	breq	.+2      	; 0x24e <Tick+0x96>
 24c:	4e c0       	rjmp	.+156    	; 0x2ea <Tick+0x132>
 24e:	0e c0       	rjmp	.+28     	; 0x26c <Tick+0xb4>
 250:	25 30       	cpi	r18, 0x05	; 5
 252:	d1 f1       	breq	.+116    	; 0x2c8 <Tick+0x110>
 254:	60 f1       	brcs	.+88     	; 0x2ae <Tick+0xf6>
 256:	26 30       	cpi	r18, 0x06	; 6
 258:	09 f0       	breq	.+2      	; 0x25c <Tick+0xa4>
 25a:	47 c0       	rjmp	.+142    	; 0x2ea <Tick+0x132>
 25c:	3e c0       	rjmp	.+124    	; 0x2da <Tick+0x122>
		case start:
		break;
		
		case init:
			count = 0;
 25e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 262:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			outputIndex = 0;
 266:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <outputIndex>
			break;
 26a:	3f c0       	rjmp	.+126    	; 0x2ea <Tick+0x132>
		
		case flicker:
			tempB = ledPattern[outputIndex];
 26c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <outputIndex>
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e0 50       	subi	r30, 0x00	; 0
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	80 81       	ld	r24, Z
 278:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempB>
			count++;
 27c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 280:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 28a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			break;
 28e:	2d c0       	rjmp	.+90     	; 0x2ea <Tick+0x132>
		
		case nextPattern:
		if(outputIndex > 1) {
 290:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <outputIndex>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	18 f0       	brcs	.+6      	; 0x29e <Tick+0xe6>
			outputIndex = 0;
 298:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <outputIndex>
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <Tick+0xec>
		}
		else {
			outputIndex++;
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <outputIndex>
		}
		count = 0;
 2a4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 2a8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		break;
 2ac:	1e c0       	rjmp	.+60     	; 0x2ea <Tick+0x132>
		
		case gameoverPress:
		count = 0;
 2ae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		tempB = ledPattern[outputIndex];
 2b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <outputIndex>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempB>
		break;
 2c6:	11 c0       	rjmp	.+34     	; 0x2ea <Tick+0x132>
		
		case gameover:
		tempB = ledPattern[outputIndex];
 2c8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <outputIndex>
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	e0 50       	subi	r30, 0x00	; 0
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempB>
		break;
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <Tick+0x132>
		
		case resetPress:
		tempB = ledPattern[outputIndex];
 2da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <outputIndex>
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e0 50       	subi	r30, 0x00	; 0
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 81       	ld	r24, Z
 2e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempB>
		break;
		
		default:
		break;
	}
	PORTB = tempB;
 2ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempB>
 2ee:	85 b9       	out	0x05, r24	; 5
}
 2f0:	08 95       	ret
		
		case flicker:
		if(count >= MSEC3) {
			state = nextPattern;
		}
		if (tempA == 0x01){
 2f2:	33 23       	and	r19, r19
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <Tick+0x140>
 2f6:	87 cf       	rjmp	.-242    	; 0x206 <Tick+0x4e>
 2f8:	b9 cf       	rjmp	.-142    	; 0x26c <Tick+0xb4>

000002fa <main>:

void Tick();

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	84 b9       	out	0x04, r24	; 4
 2fe:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 300:	11 b8       	out	0x01, r1	; 1
 302:	82 b9       	out	0x02, r24	; 2
	TimerSet(PERIOD);
 304:	64 e6       	ldi	r22, 0x64	; 100
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	44 df       	rcall	.-376    	; 0x196 <TimerSet>
	TimerOn();
 30e:	e3 de       	rcall	.-570    	; 0xd6 <TimerOn>
	
	while (1)
	{
		Tick();
 310:	53 df       	rcall	.-346    	; 0x1b8 <Tick>
 312:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFlag>
		while(!TimerFlag){}
 316:	88 23       	and	r24, r24
 318:	e1 f3       	breq	.-8      	; 0x312 <main+0x18>
 31a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFlag>
		TimerFlag = 0;
 31e:	f8 cf       	rjmp	.-16     	; 0x310 <main+0x16>

00000320 <__tablejump2__>:
		
	}
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	00 24       	eor	r0, r0
 326:	00 1c       	adc	r0, r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	07 90       	elpm	r0, Z+
 32c:	f6 91       	elpm	r31, Z
 32e:	e0 2d       	mov	r30, r0
 330:	09 94       	ijmp

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
