
Lab04PartB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086f  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	75 c0       	rjmp	.+234    	; 0x186 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
	PORTA = 0xFF;
  b2:	82 e2       	ldi	r24, 0x22	; 34
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRC = 0xFF;
  bc:	87 e2       	ldi	r24, 0x27	; 39
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	PORTC = 0x00;
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
	char unsigned a = 0;
  ce:	1c 82       	std	Y+4, r1	; 0x04
	char unsigned c = 0;
  d0:	19 82       	std	Y+1, r1	; 0x01
    /* Replace with your application code */
	enum state {init,maintance,reset,sub,add} state;
		state = init;
  d2:	1b 82       	std	Y+3, r1	; 0x03
  d4:	1a 82       	std	Y+2, r1	; 0x02
    while (1) 
    {
		a = PINA & 0x03;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	83 70       	andi	r24, 0x03	; 3
  e0:	8c 83       	std	Y+4, r24	; 0x04
		switch(state){
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	9b 81       	ldd	r25, Y+3	; 0x03
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	91 05       	cpc	r25, r1
  ea:	69 f1       	breq	.+90     	; 0x146 <main+0xa8>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	91 05       	cpc	r25, r1
  f0:	28 f4       	brcc	.+10     	; 0xfc <main+0x5e>
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	49 f0       	breq	.+18     	; 0x108 <main+0x6a>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	71 f0       	breq	.+28     	; 0x116 <main+0x78>
  fa:	3b c0       	rjmp	.+118    	; 0x172 <main+0xd4>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	91 05       	cpc	r25, r1
 100:	41 f1       	breq	.+80     	; 0x152 <main+0xb4>
 102:	04 97       	sbiw	r24, 0x04	; 4
 104:	71 f1       	breq	.+92     	; 0x162 <main+0xc4>
 106:	35 c0       	rjmp	.+106    	; 0x172 <main+0xd4>
		case init:
			c = 7;
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	89 83       	std	Y+1, r24	; 0x01
			state = maintance;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	9b 83       	std	Y+3, r25	; 0x03
 112:	8a 83       	std	Y+2, r24	; 0x02
			break;
 114:	32 c0       	rjmp	.+100    	; 0x17a <main+0xdc>
		case maintance:
			if (a==1){
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	29 f4       	brne	.+10     	; 0x126 <main+0x88>
				state = add;
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9b 83       	std	Y+3, r25	; 0x03
 122:	8a 83       	std	Y+2, r24	; 0x02
				state = sub;
			}
			else if (a==3){
				state = reset;
			}
			break;
 124:	29 c0       	rjmp	.+82     	; 0x178 <main+0xda>
			break;
		case maintance:
			if (a==1){
				state = add;
			}
			else if (a==2){
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	29 f4       	brne	.+10     	; 0x136 <main+0x98>
				state = sub;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	9b 83       	std	Y+3, r25	; 0x03
 132:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if (a==3){
				state = reset;
			}
			break;
 134:	21 c0       	rjmp	.+66     	; 0x178 <main+0xda>
				state = add;
			}
			else if (a==2){
				state = sub;
			}
			else if (a==3){
 136:	8c 81       	ldd	r24, Y+4	; 0x04
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	f1 f4       	brne	.+60     	; 0x178 <main+0xda>
				state = reset;
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9b 83       	std	Y+3, r25	; 0x03
 142:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
 144:	19 c0       	rjmp	.+50     	; 0x178 <main+0xda>
		case reset:
			c = 0;
 146:	19 82       	std	Y+1, r1	; 0x01
			state = maintance;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9b 83       	std	Y+3, r25	; 0x03
 14e:	8a 83       	std	Y+2, r24	; 0x02
			break;
 150:	14 c0       	rjmp	.+40     	; 0x17a <main+0xdc>
		case sub:
			c -= 1;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	81 50       	subi	r24, 0x01	; 1
 156:	89 83       	std	Y+1, r24	; 0x01
			state = maintance;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9b 83       	std	Y+3, r25	; 0x03
 15e:	8a 83       	std	Y+2, r24	; 0x02
			break;
 160:	0c c0       	rjmp	.+24     	; 0x17a <main+0xdc>
		case add:
			c++;
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	89 83       	std	Y+1, r24	; 0x01
			state = maintance;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9b 83       	std	Y+3, r25	; 0x03
 16e:	8a 83       	std	Y+2, r24	; 0x02
			break;
 170:	04 c0       	rjmp	.+8      	; 0x17a <main+0xdc>
		default:
			state = init;
 172:	1b 82       	std	Y+3, r1	; 0x03
 174:	1a 82       	std	Y+2, r1	; 0x02
			break;
 176:	01 c0       	rjmp	.+2      	; 0x17a <main+0xdc>
				state = sub;
			}
			else if (a==3){
				state = reset;
			}
			break;
 178:	00 00       	nop
			break;
		default:
			state = init;
			break;
		}
		PORTC = c;
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	29 81       	ldd	r18, Y+1	; 0x01
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
    }
 184:	a8 cf       	rjmp	.-176    	; 0xd6 <main+0x38>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
