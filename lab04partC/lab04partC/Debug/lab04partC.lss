
lab04partC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb4  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b96  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c6  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000545  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000024ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
   6:	00 00       	nop
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	00 00       	nop
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	00 00       	nop
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	00 00       	nop
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
  22:	00 00       	nop
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
  26:	00 00       	nop
  28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
  32:	00 00       	nop
  34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
  36:	00 00       	nop
  38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__bad_interrupt>
  42:	00 00       	nop
  44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
  46:	00 00       	nop
  48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	51 c0       	rjmp	.+162    	; 0xf4 <__bad_interrupt>
  52:	00 00       	nop
  54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
  56:	00 00       	nop
  58:	4d c0       	rjmp	.+154    	; 0xf4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
  62:	00 00       	nop
  64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
  66:	00 00       	nop
  68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	41 c0       	rjmp	.+130    	; 0xf4 <__bad_interrupt>
  72:	00 00       	nop
  74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
  76:	00 00       	nop
  78:	3d c0       	rjmp	.+122    	; 0xf4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
  82:	00 00       	nop
  84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
  86:	00 00       	nop
  88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	33 c0       	rjmp	.+102    	; 0xf4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	31 c0       	rjmp	.+98     	; 0xf4 <__bad_interrupt>
  92:	00 00       	nop
  94:	2f c0       	rjmp	.+94     	; 0xf4 <__bad_interrupt>
  96:	00 00       	nop
  98:	2d c0       	rjmp	.+90     	; 0xf4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2b c0       	rjmp	.+86     	; 0xf4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	29 c0       	rjmp	.+82     	; 0xf4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	27 c0       	rjmp	.+78     	; 0xf4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	25 c0       	rjmp	.+74     	; 0xf4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	23 c0       	rjmp	.+70     	; 0xf4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	21 c0       	rjmp	.+66     	; 0xf4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	1f c0       	rjmp	.+62     	; 0xf4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1d c0       	rjmp	.+58     	; 0xf4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1b c0       	rjmp	.+54     	; 0xf4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	19 c0       	rjmp	.+50     	; 0xf4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	13 c0       	rjmp	.+38     	; 0xf4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	11 c0       	rjmp	.+34     	; 0xf4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	02 d0       	rcall	.+4      	; 0xf6 <main>
  f2:	9f c0       	rjmp	.+318    	; 0x232 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:

#include <avr/io.h>


int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	00 d0       	rcall	.+0      	; 0xfc <main+0x6>
  fc:	00 d0       	rcall	.+0      	; 0xfe <main+0x8>
  fe:	00 d0       	rcall	.+0      	; 0x100 <main+0xa>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0x00;
 104:	81 e2       	ldi	r24, 0x21	; 33
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	10 82       	st	Z, r1
	PORTA = 0xFF;
 10c:	82 e2       	ldi	r24, 0x22	; 34
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	DDRB = 0xFF;
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	PORTB = 0x00;
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	10 82       	st	Z, r1
	PORTC = 0x00;
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	10 82       	st	Z, r1
	DDRC = 0xFF;
 130:	87 e2       	ldi	r24, 0x27	; 39
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	char unsigned output = 0;
 13a:	19 82       	std	Y+1, r1	; 0x01
	char unsigned input = 0;
 13c:	1d 82       	std	Y+5, r1	; 0x05
	char unsigned inside = 0;
 13e:	1e 82       	std	Y+6, r1	; 0x06
	char unsigned stateOutput = 0;
 140:	1a 82       	std	Y+2, r1	; 0x02
	enum state{n0,n1,n2,n3,n4} state;
		state = 0;
 142:	1c 82       	std	Y+4, r1	; 0x04
 144:	1b 82       	std	Y+3, r1	; 0x03
    while (1) 
    {
		input = PINA & 0x07;
 146:	80 e2       	ldi	r24, 0x20	; 32
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	87 70       	andi	r24, 0x07	; 7
 150:	8d 83       	std	Y+5, r24	; 0x05
		inside = PINA & 0x80;
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	80 78       	andi	r24, 0x80	; 128
 15c:	8e 83       	std	Y+6, r24	; 0x06
		inside = inside >> 7;
 15e:	8e 81       	ldd	r24, Y+6	; 0x06
 160:	88 1f       	adc	r24, r24
 162:	88 27       	eor	r24, r24
 164:	88 1f       	adc	r24, r24
 166:	8e 83       	std	Y+6, r24	; 0x06
		switch(state){
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	11 f1       	breq	.+68     	; 0x1b6 <main+0xc0>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	91 05       	cpc	r25, r1
 176:	28 f4       	brcc	.+10     	; 0x182 <main+0x8c>
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	49 f0       	breq	.+18     	; 0x18e <main+0x98>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	71 f0       	breq	.+28     	; 0x19c <main+0xa6>
 180:	4d c0       	rjmp	.+154    	; 0x21c <main+0x126>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	91 05       	cpc	r25, r1
 186:	21 f1       	breq	.+72     	; 0x1d0 <main+0xda>
 188:	04 97       	sbiw	r24, 0x04	; 4
 18a:	89 f1       	breq	.+98     	; 0x1ee <main+0xf8>
 18c:	47 c0       	rjmp	.+142    	; 0x21c <main+0x126>
			case n0:
				state = n1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 83       	std	Y+4, r25	; 0x04
 194:	8b 83       	std	Y+3, r24	; 0x03
				stateOutput = 0;
 196:	1a 82       	std	Y+2, r1	; 0x02
				output = 0;
 198:	19 82       	std	Y+1, r1	; 0x01
				break;
 19a:	40 c0       	rjmp	.+128    	; 0x21c <main+0x126>
			case n1:
				stateOutput = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	8a 83       	std	Y+2, r24	; 0x02
				if (input == 4 && inside == 0){
 1a0:	8d 81       	ldd	r24, Y+5	; 0x05
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	a1 f5       	brne	.+104    	; 0x20e <main+0x118>
 1a6:	8e 81       	ldd	r24, Y+6	; 0x06
 1a8:	88 23       	and	r24, r24
 1aa:	89 f5       	brne	.+98     	; 0x20e <main+0x118>
					state = n2;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9c 83       	std	Y+4, r25	; 0x04
 1b2:	8b 83       	std	Y+3, r24	; 0x03
				}
				break;
 1b4:	2c c0       	rjmp	.+88     	; 0x20e <main+0x118>
			case n2:
			stateOutput = 2;
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	8a 83       	std	Y+2, r24	; 0x02
				if(input == 0 && inside == 0) {
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	88 23       	and	r24, r24
 1be:	49 f5       	brne	.+82     	; 0x212 <main+0x11c>
 1c0:	8e 81       	ldd	r24, Y+6	; 0x06
 1c2:	88 23       	and	r24, r24
 1c4:	31 f5       	brne	.+76     	; 0x212 <main+0x11c>
					state = n3;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9c 83       	std	Y+4, r25	; 0x04
 1cc:	8b 83       	std	Y+3, r24	; 0x03
				}
				break;
 1ce:	21 c0       	rjmp	.+66     	; 0x212 <main+0x11c>
			case n3:
				stateOutput = 3;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	8a 83       	std	Y+2, r24	; 0x02
				if(input == 2 && inside == 0) {
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	f1 f4       	brne	.+60     	; 0x216 <main+0x120>
 1da:	8e 81       	ldd	r24, Y+6	; 0x06
 1dc:	88 23       	and	r24, r24
 1de:	d9 f4       	brne	.+54     	; 0x216 <main+0x120>
					state = n4;
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9c 83       	std	Y+4, r25	; 0x04
 1e6:	8b 83       	std	Y+3, r24	; 0x03
					output = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 83       	std	Y+1, r24	; 0x01
				}
				break;
 1ec:	14 c0       	rjmp	.+40     	; 0x216 <main+0x120>
			case n4:
				stateOutput = 4;
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	8a 83       	std	Y+2, r24	; 0x02
				output = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	89 83       	std	Y+1, r24	; 0x01
				if(input == 0 && inside == 1) {
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	88 23       	and	r24, r24
 1fa:	79 f4       	brne	.+30     	; 0x21a <main+0x124>
 1fc:	8e 81       	ldd	r24, Y+6	; 0x06
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	61 f4       	brne	.+24     	; 0x21a <main+0x124>
					state = n1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	9c 83       	std	Y+4, r25	; 0x04
 208:	8b 83       	std	Y+3, r24	; 0x03
					output = 0;
 20a:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0x124>
			case n1:
				stateOutput = 1;
				if (input == 4 && inside == 0){
					state = n2;
				}
				break;
 20e:	00 00       	nop
 210:	05 c0       	rjmp	.+10     	; 0x21c <main+0x126>
			case n2:
			stateOutput = 2;
				if(input == 0 && inside == 0) {
					state = n3;
				}
				break;
 212:	00 00       	nop
 214:	03 c0       	rjmp	.+6      	; 0x21c <main+0x126>
				stateOutput = 3;
				if(input == 2 && inside == 0) {
					state = n4;
					output = 1;
				}
				break;
 216:	00 00       	nop
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x126>
				output = 1;
				if(input == 0 && inside == 1) {
					state = n1;
					output = 0;
				}
				break;
 21a:	00 00       	nop
				
		}
		PORTB = output;
 21c:	85 e2       	ldi	r24, 0x25	; 37
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
		PORTC = stateOutput;
 226:	88 e2       	ldi	r24, 0x28	; 40
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	2a 81       	ldd	r18, Y+2	; 0x02
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
    }
 230:	8a cf       	rjmp	.-236    	; 0x146 <main+0x50>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
